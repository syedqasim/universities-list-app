{"ast":null,"code":"// UniversityController.ts\nimport University from\"../models/University\";const API_URL=\"http://universities.hipolabs.com/search?country=United%20Arab%20Emirates\";class UniversityController{static async fetchUniversities(){try{const response=await fetch(API_URL);if(!response.ok){throw new Error(\"Network response was not ok\");}const data=await response.json();const universities=data.map(uni=>new University(uni.name,uni.country,uni.web_pages,uni.domains));localStorage.setItem(\"universities\",JSON.stringify(universities));return universities;}catch(error){const cachedUniversities=localStorage.getItem(\"universities\");if(cachedUniversities){return JSON.parse(cachedUniversities);}else{throw new Error(\"Failed to fetch universities and no cached data found\");}}}static searchUniversities(keyword){const universities=JSON.parse(localStorage.getItem(\"universities\")||\"[]\");return universities.filter(uni=>uni.name.toLowerCase().includes(keyword.toLowerCase()));}static sortUniversities(){let alphabetically=arguments.length>0&&arguments[0]!==undefined?arguments[0]:true;const universities=JSON.parse(localStorage.getItem(\"universities\")||\"[]\");return universities.sort((a,b)=>{if(alphabetically){return a.name.localeCompare(b.name);}else{return b.name.localeCompare(a.name);}});}static deleteUniversity(name){let universities=JSON.parse(localStorage.getItem(\"universities\")||\"[]\");universities=universities.filter(uni=>uni.name!==name);localStorage.setItem(\"universities\",JSON.stringify(universities));return universities;}}export default UniversityController;","map":{"version":3,"names":["University","API_URL","UniversityController","fetchUniversities","response","fetch","ok","Error","data","json","universities","map","uni","name","country","web_pages","domains","localStorage","setItem","JSON","stringify","error","cachedUniversities","getItem","parse","searchUniversities","keyword","filter","toLowerCase","includes","sortUniversities","alphabetically","arguments","length","undefined","sort","a","b","localeCompare","deleteUniversity"],"sources":["/Users/tamm/work/universities-list-app/src/controllers/UniversityController.ts"],"sourcesContent":["// UniversityController.ts\nimport University from \"../models/University\";\n\nconst API_URL =\n  \"http://universities.hipolabs.com/search?country=United%20Arab%20Emirates\";\n\nclass UniversityController {\n  static async fetchUniversities(): Promise<University[]> {\n    try {\n      const response = await fetch(API_URL);\n      if (!response.ok) {\n        throw new Error(\"Network response was not ok\");\n      }\n      const data = await response.json();\n      const universities = data.map(\n        (uni: any) =>\n          new University(uni.name, uni.country, uni.web_pages, uni.domains)\n      );\n      localStorage.setItem(\"universities\", JSON.stringify(universities));\n      return universities;\n    } catch (error) {\n      const cachedUniversities = localStorage.getItem(\"universities\");\n      if (cachedUniversities) {\n        return JSON.parse(cachedUniversities);\n      } else {\n        throw new Error(\n          \"Failed to fetch universities and no cached data found\"\n        );\n      }\n    }\n  }\n\n  static searchUniversities(keyword: string): University[] {\n    const universities: University[] = JSON.parse(\n      localStorage.getItem(\"universities\") || \"[]\"\n    );\n    return universities.filter((uni) =>\n      uni.name.toLowerCase().includes(keyword.toLowerCase())\n    );\n  }\n\n  static sortUniversities(alphabetically: boolean = true): University[] {\n    const universities: University[] = JSON.parse(\n      localStorage.getItem(\"universities\") || \"[]\"\n    );\n    return universities.sort((a, b) => {\n      if (alphabetically) {\n        return a.name.localeCompare(b.name);\n      } else {\n        return b.name.localeCompare(a.name);\n      }\n    });\n  }\n\n  static deleteUniversity(name: string): University[] {\n    let universities: University[] = JSON.parse(\n      localStorage.getItem(\"universities\") || \"[]\"\n    );\n    universities = universities.filter((uni) => uni.name !== name);\n    localStorage.setItem(\"universities\", JSON.stringify(universities));\n    return universities;\n  }\n}\n\nexport default UniversityController;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
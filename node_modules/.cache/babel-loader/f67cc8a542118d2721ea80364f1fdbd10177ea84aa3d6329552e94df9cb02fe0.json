{"ast":null,"code":"import redent from 'redent';\nimport { parse } from '@adobe/css-tools';\nimport { computeAccessibleDescription, computeAccessibleName } from 'dom-accessibility-api';\nimport { elementRoles, roles } from 'aria-query';\nimport chalk from 'chalk';\nimport isEqualWith from 'lodash/isEqualWith.js';\nimport escape from 'css.escape';\nclass GenericTypeError extends Error {\n  constructor(expectedString, received, matcherFn, context) {\n    super();\n\n    /* istanbul ignore next */\n    if (Error.captureStackTrace) {\n      Error.captureStackTrace(this, matcherFn);\n    }\n    let withType = '';\n    try {\n      withType = context.utils.printWithType('Received', received, context.utils.printReceived);\n    } catch (e) {\n      // Can throw for Document:\n      // https://github.com/jsdom/jsdom/issues/2304\n    }\n    this.message = [context.utils.matcherHint(`${context.isNot ? '.not' : ''}.${matcherFn.name}`, 'received', ''), '',\n    // eslint-disable-next-line new-cap\n    `${context.utils.RECEIVED_COLOR('received')} value must ${expectedString}.`, withType].join('\\n');\n  }\n}\nclass HtmlElementTypeError extends GenericTypeError {\n  constructor(...args) {\n    super('be an HTMLElement or an SVGElement', ...args);\n  }\n}\nclass NodeTypeError extends GenericTypeError {\n  constructor(...args) {\n    super('be a Node', ...args);\n  }\n}\nfunction checkHasWindow(htmlElement, ErrorClass, ...args) {\n  if (!htmlElement || !htmlElement.ownerDocument || !htmlElement.ownerDocument.defaultView) {\n    throw new ErrorClass(htmlElement, ...args);\n  }\n}\nfunction checkNode(node, ...args) {\n  checkHasWindow(node, NodeTypeError, ...args);\n  const window = node.ownerDocument.defaultView;\n  if (!(node instanceof window.Node)) {\n    throw new NodeTypeError(node, ...args);\n  }\n}\nfunction checkHtmlElement(htmlElement, ...args) {\n  checkHasWindow(htmlElement, HtmlElementTypeError, ...args);\n  const window = htmlElement.ownerDocument.defaultView;\n  if (!(htmlElement instanceof window.HTMLElement) && !(htmlElement instanceof window.SVGElement)) {\n    throw new HtmlElementTypeError(htmlElement, ...args);\n  }\n}\nclass InvalidCSSError extends Error {\n  constructor(received, matcherFn, context) {\n    super();\n\n    /* istanbul ignore next */\n    if (Error.captureStackTrace) {\n      Error.captureStackTrace(this, matcherFn);\n    }\n    this.message = [received.message, '',\n    // eslint-disable-next-line new-cap\n    context.utils.RECEIVED_COLOR(`Failing css:`),\n    // eslint-disable-next-line new-cap\n    context.utils.RECEIVED_COLOR(`${received.css}`)].join('\\n');\n  }\n}\nfunction parseCSS(css, ...args) {\n  const ast = parse(`selector { ${css} }`, {\n    silent: true\n  }).stylesheet;\n  if (ast.parsingErrors && ast.parsingErrors.length > 0) {\n    const {\n      reason,\n      line\n    } = ast.parsingErrors[0];\n    throw new InvalidCSSError({\n      css,\n      message: `Syntax error parsing expected css: ${reason} on line: ${line}`\n    }, ...args);\n  }\n  const parsedRules = ast.rules[0].declarations.filter(d => d.type === 'declaration').reduce((obj, {\n    property,\n    value\n  }) => Object.assign(obj, {\n    [property]: value\n  }), {});\n  return parsedRules;\n}\nfunction display(context, value) {\n  return typeof value === 'string' ? value : context.utils.stringify(value);\n}\nfunction getMessage(context, matcher, expectedLabel, expectedValue, receivedLabel, receivedValue) {\n  return [`${matcher}\\n`,\n  // eslint-disable-next-line new-cap\n  `${expectedLabel}:\\n${context.utils.EXPECTED_COLOR(redent(display(context, expectedValue), 2))}`,\n  // eslint-disable-next-line new-cap\n  `${receivedLabel}:\\n${context.utils.RECEIVED_COLOR(redent(display(context, receivedValue), 2))}`].join('\\n');\n}\nfunction matches(textToMatch, matcher) {\n  if (matcher instanceof RegExp) {\n    return matcher.test(textToMatch);\n  } else {\n    return textToMatch.includes(String(matcher));\n  }\n}\nfunction deprecate(name, replacementText) {\n  // Notify user that they are using deprecated functionality.\n  // eslint-disable-next-line no-console\n  console.warn(`Warning: ${name} has been deprecated and will be removed in future updates.`, replacementText);\n}\nfunction normalize(text) {\n  return text.replace(/\\s+/g, ' ').trim();\n}\nfunction getTag(element) {\n  return element.tagName && element.tagName.toLowerCase();\n}\nfunction getSelectValue({\n  multiple,\n  options\n}) {\n  const selectedOptions = [...options].filter(option => option.selected);\n  if (multiple) {\n    return [...selectedOptions].map(opt => opt.value);\n  }\n  /* istanbul ignore if */\n  if (selectedOptions.length === 0) {\n    return undefined; // Couldn't make this happen, but just in case\n  }\n  return selectedOptions[0].value;\n}\nfunction getInputValue(inputElement) {\n  switch (inputElement.type) {\n    case 'number':\n      return inputElement.value === '' ? null : Number(inputElement.value);\n    case 'checkbox':\n      return inputElement.checked;\n    default:\n      return inputElement.value;\n  }\n}\nfunction getSingleElementValue(element) {\n  /* istanbul ignore if */\n  if (!element) {\n    return undefined;\n  }\n  switch (element.tagName.toLowerCase()) {\n    case 'input':\n      return getInputValue(element);\n    case 'select':\n      return getSelectValue(element);\n    default:\n      return element.value;\n  }\n}\nfunction toSentence(array, {\n  wordConnector = ', ',\n  lastWordConnector = ' and '\n} = {}) {\n  return [array.slice(0, -1).join(wordConnector), array[array.length - 1]].join(array.length > 1 ? lastWordConnector : '');\n}\nfunction compareArraysAsSet(arr1, arr2) {\n  if (Array.isArray(arr1) && Array.isArray(arr2)) {\n    return [...new Set(arr1)].every(v => new Set(arr2).has(v));\n  }\n  return undefined;\n}\nfunction toBeInTheDOM(element, container) {\n  deprecate('toBeInTheDOM', 'Please use toBeInTheDocument for searching the entire document and toContainElement for searching a specific container.');\n  if (element) {\n    checkHtmlElement(element, toBeInTheDOM, this);\n  }\n  if (container) {\n    checkHtmlElement(container, toBeInTheDOM, this);\n  }\n  return {\n    pass: container ? container.contains(element) : !!element,\n    message: () => {\n      return [this.utils.matcherHint(`${this.isNot ? '.not' : ''}.toBeInTheDOM`, 'element', ''), '', 'Received:', `  ${this.utils.printReceived(element ? element.cloneNode(false) : element)}`].join('\\n');\n    }\n  };\n}\nfunction toBeInTheDocument(element) {\n  if (element !== null || !this.isNot) {\n    checkHtmlElement(element, toBeInTheDocument, this);\n  }\n  const pass = element === null ? false : element.ownerDocument === element.getRootNode({\n    composed: true\n  });\n  const errorFound = () => {\n    return `expected document not to contain element, found ${this.utils.stringify(element.cloneNode(true))} instead`;\n  };\n  const errorNotFound = () => {\n    return `element could not be found in the document`;\n  };\n  return {\n    pass,\n    message: () => {\n      return [this.utils.matcherHint(`${this.isNot ? '.not' : ''}.toBeInTheDocument`, 'element', ''), '',\n      // eslint-disable-next-line new-cap\n      this.utils.RECEIVED_COLOR(this.isNot ? errorFound() : errorNotFound())].join('\\n');\n    }\n  };\n}\nfunction toBeEmpty(element) {\n  deprecate('toBeEmpty', 'Please use instead toBeEmptyDOMElement for finding empty nodes in the DOM.');\n  checkHtmlElement(element, toBeEmpty, this);\n  return {\n    pass: element.innerHTML === '',\n    message: () => {\n      return [this.utils.matcherHint(`${this.isNot ? '.not' : ''}.toBeEmpty`, 'element', ''), '', 'Received:', `  ${this.utils.printReceived(element.innerHTML)}`].join('\\n');\n    }\n  };\n}\nfunction toBeEmptyDOMElement(element) {\n  checkHtmlElement(element, toBeEmptyDOMElement, this);\n  return {\n    pass: isEmptyElement(element),\n    message: () => {\n      return [this.utils.matcherHint(`${this.isNot ? '.not' : ''}.toBeEmptyDOMElement`, 'element', ''), '', 'Received:', `  ${this.utils.printReceived(element.innerHTML)}`].join('\\n');\n    }\n  };\n}\n\n/**\n * Identifies if an element doesn't contain child nodes (excluding comments)\n * â„¹ Node.COMMENT_NODE can't be used because of the following issue \n * https://github.com/jsdom/jsdom/issues/2220\n *\n * @param {*} element an HtmlElement or SVGElement\n * @return {*} true if the element only contains comments or none\n */\nfunction isEmptyElement(element) {\n  const nonCommentChildNodes = [...element.childNodes].filter(node => node.nodeType !== 8);\n  return nonCommentChildNodes.length === 0;\n}\nfunction toContainElement(container, element) {\n  checkHtmlElement(container, toContainElement, this);\n  if (element !== null) {\n    checkHtmlElement(element, toContainElement, this);\n  }\n  return {\n    pass: container.contains(element),\n    message: () => {\n      return [this.utils.matcherHint(`${this.isNot ? '.not' : ''}.toContainElement`, 'element', 'element'), '',\n      // eslint-disable-next-line new-cap\n      this.utils.RECEIVED_COLOR(`${this.utils.stringify(container.cloneNode(false))} ${this.isNot ? 'contains:' : 'does not contain:'} ${this.utils.stringify(element ? element.cloneNode(false) : element)}\n        `)].join('\\n');\n    }\n  };\n}\nfunction getNormalizedHtml(container, htmlText) {\n  const div = container.ownerDocument.createElement('div');\n  div.innerHTML = htmlText;\n  return div.innerHTML;\n}\nfunction toContainHTML(container, htmlText) {\n  checkHtmlElement(container, toContainHTML, this);\n  if (typeof htmlText !== 'string') {\n    throw new Error(`.toContainHTML() expects a string value, got ${htmlText}`);\n  }\n  return {\n    pass: container.outerHTML.includes(getNormalizedHtml(container, htmlText)),\n    message: () => {\n      return [this.utils.matcherHint(`${this.isNot ? '.not' : ''}.toContainHTML`, 'element', ''), 'Expected:',\n      // eslint-disable-next-line new-cap\n      `  ${this.utils.EXPECTED_COLOR(htmlText)}`, 'Received:', `  ${this.utils.printReceived(container.cloneNode(true))}`].join('\\n');\n    }\n  };\n}\nfunction toHaveTextContent(node, checkWith, options = {\n  normalizeWhitespace: true\n}) {\n  checkNode(node, toHaveTextContent, this);\n  const textContent = options.normalizeWhitespace ? normalize(node.textContent) : node.textContent.replace(/\\u00a0/g, ' '); // Replace &nbsp; with normal spaces\n\n  const checkingWithEmptyString = textContent !== '' && checkWith === '';\n  return {\n    pass: !checkingWithEmptyString && matches(textContent, checkWith),\n    message: () => {\n      const to = this.isNot ? 'not to' : 'to';\n      return getMessage(this, this.utils.matcherHint(`${this.isNot ? '.not' : ''}.toHaveTextContent`, 'element', ''), checkingWithEmptyString ? `Checking with empty string will always match, use .toBeEmptyDOMElement() instead` : `Expected element ${to} have text content`, checkWith, 'Received', textContent);\n    }\n  };\n}\nfunction toHaveAccessibleDescription(htmlElement, expectedAccessibleDescription) {\n  checkHtmlElement(htmlElement, toHaveAccessibleDescription, this);\n  const actualAccessibleDescription = computeAccessibleDescription(htmlElement);\n  const missingExpectedValue = arguments.length === 1;\n  let pass = false;\n  if (missingExpectedValue) {\n    // When called without an expected value we only want to validate that the element has an\n    // accessible description, whatever it may be.\n    pass = actualAccessibleDescription !== '';\n  } else {\n    pass = expectedAccessibleDescription instanceof RegExp ? expectedAccessibleDescription.test(actualAccessibleDescription) : this.equals(actualAccessibleDescription, expectedAccessibleDescription);\n  }\n  return {\n    pass,\n    message: () => {\n      const to = this.isNot ? 'not to' : 'to';\n      return getMessage(this, this.utils.matcherHint(`${this.isNot ? '.not' : ''}.${toHaveAccessibleDescription.name}`, 'element', ''), `Expected element ${to} have accessible description`, expectedAccessibleDescription, 'Received', actualAccessibleDescription);\n    }\n  };\n}\nconst ariaInvalidName = 'aria-invalid';\nconst validStates = ['false'];\n\n// See `aria-errormessage` spec at https://www.w3.org/TR/wai-aria-1.2/#aria-errormessage\nfunction toHaveAccessibleErrorMessage(htmlElement, expectedAccessibleErrorMessage) {\n  checkHtmlElement(htmlElement, toHaveAccessibleErrorMessage, this);\n  const to = this.isNot ? 'not to' : 'to';\n  const method = this.isNot ? '.not.toHaveAccessibleErrorMessage' : '.toHaveAccessibleErrorMessage';\n\n  // Enforce Valid Id\n  const errormessageId = htmlElement.getAttribute('aria-errormessage');\n  const errormessageIdInvalid = !!errormessageId && /\\s+/.test(errormessageId);\n  if (errormessageIdInvalid) {\n    return {\n      pass: false,\n      message: () => {\n        return getMessage(this, this.utils.matcherHint(method, 'element'), \"Expected element's `aria-errormessage` attribute to be empty or a single, valid ID\", '', 'Received', `aria-errormessage=\"${errormessageId}\"`);\n      }\n    };\n  }\n\n  // See `aria-invalid` spec at https://www.w3.org/TR/wai-aria-1.2/#aria-invalid\n  const ariaInvalidVal = htmlElement.getAttribute(ariaInvalidName);\n  const fieldValid = !htmlElement.hasAttribute(ariaInvalidName) || validStates.includes(ariaInvalidVal);\n\n  // Enforce Valid `aria-invalid` Attribute\n  if (fieldValid) {\n    return {\n      pass: false,\n      message: () => {\n        return getMessage(this, this.utils.matcherHint(method, 'element'), 'Expected element to be marked as invalid with attribute', `${ariaInvalidName}=\"${String(true)}\"`, 'Received', htmlElement.hasAttribute('aria-invalid') ? `${ariaInvalidName}=\"${htmlElement.getAttribute(ariaInvalidName)}` : null);\n      }\n    };\n  }\n  const error = normalize(htmlElement.ownerDocument.getElementById(errormessageId)?.textContent ?? '');\n  return {\n    pass: expectedAccessibleErrorMessage === undefined ? Boolean(error) : expectedAccessibleErrorMessage instanceof RegExp ? expectedAccessibleErrorMessage.test(error) : this.equals(error, expectedAccessibleErrorMessage),\n    message: () => {\n      return getMessage(this, this.utils.matcherHint(method, 'element'), `Expected element ${to} have accessible error message`, expectedAccessibleErrorMessage ?? '', 'Received', error);\n    }\n  };\n}\nconst elementRoleList = buildElementRoleList(elementRoles);\nfunction toHaveRole(htmlElement, expectedRole) {\n  checkHtmlElement(htmlElement, toHaveRole, this);\n  const actualRoles = getExplicitOrImplicitRoles(htmlElement);\n  const pass = actualRoles.some(el => el === expectedRole);\n  return {\n    pass,\n    message: () => {\n      const to = this.isNot ? 'not to' : 'to';\n      return getMessage(this, this.utils.matcherHint(`${this.isNot ? '.not' : ''}.${toHaveRole.name}`, 'element', ''), `Expected element ${to} have role`, expectedRole, 'Received', actualRoles.join(', '));\n    }\n  };\n}\nfunction getExplicitOrImplicitRoles(htmlElement) {\n  const hasExplicitRole = htmlElement.hasAttribute('role');\n  if (hasExplicitRole) {\n    const roleValue = htmlElement.getAttribute('role');\n\n    // Handle fallback roles, such as role=\"switch button\"\n    // testing-library gates this behind the `queryFallbacks` flag; it is\n    // unclear why, but it makes sense to support this pattern out of the box\n    // https://testing-library.com/docs/queries/byrole/#queryfallbacks\n    return roleValue.split(' ').filter(Boolean);\n  }\n  const implicitRoles = getImplicitAriaRoles(htmlElement);\n  return implicitRoles;\n}\nfunction getImplicitAriaRoles(currentNode) {\n  for (const {\n    match,\n    roles\n  } of elementRoleList) {\n    if (match(currentNode)) {\n      return [...roles];\n    }\n  }\n\n  /* istanbul ignore next */\n  return []; // this does not get reached in practice, since elements have at least a 'generic' role\n}\n\n/**\n * Transform the roles map (with required attributes and constraints) to a list\n * of roles. Each item in the list has functions to match an element against it.\n *\n * Essentially copied over from [dom-testing-library's\n * helpers](https://github.com/testing-library/dom-testing-library/blob/bd04cf95a1ed85a2238f7dfc1a77d5d16b4f59dc/src/role-helpers.js#L80)\n *\n * TODO: If we are truly just copying over stuff, would it make sense to move\n * this to a separate package?\n *\n * TODO: This technique relies on CSS selectors; are those consistently\n * available in all jest-dom environments? Why do other matchers in this package\n * not use them like this?\n */\nfunction buildElementRoleList(elementRolesMap) {\n  function makeElementSelector({\n    name,\n    attributes\n  }) {\n    return `${name}${attributes.map(({\n      name: attributeName,\n      value,\n      constraints = []\n    }) => {\n      const shouldNotExist = constraints.indexOf('undefined') !== -1;\n      if (shouldNotExist) {\n        return `:not([${attributeName}])`;\n      } else if (value) {\n        return `[${attributeName}=\"${value}\"]`;\n      } else {\n        return `[${attributeName}]`;\n      }\n    }).join('')}`;\n  }\n  function getSelectorSpecificity({\n    attributes = []\n  }) {\n    return attributes.length;\n  }\n  function bySelectorSpecificity({\n    specificity: leftSpecificity\n  }, {\n    specificity: rightSpecificity\n  }) {\n    return rightSpecificity - leftSpecificity;\n  }\n  function match(element) {\n    let {\n      attributes = []\n    } = element;\n\n    // https://github.com/testing-library/dom-testing-library/issues/814\n    const typeTextIndex = attributes.findIndex(attribute => attribute.value && attribute.name === 'type' && attribute.value === 'text');\n    if (typeTextIndex >= 0) {\n      // not using splice to not mutate the attributes array\n      attributes = [...attributes.slice(0, typeTextIndex), ...attributes.slice(typeTextIndex + 1)];\n    }\n    const selector = makeElementSelector({\n      ...element,\n      attributes\n    });\n    return node => {\n      if (typeTextIndex >= 0 && node.type !== 'text') {\n        return false;\n      }\n      return node.matches(selector);\n    };\n  }\n  let result = [];\n  for (const [element, roles] of elementRolesMap.entries()) {\n    result = [...result, {\n      match: match(element),\n      roles: Array.from(roles),\n      specificity: getSelectorSpecificity(element)\n    }];\n  }\n  return result.sort(bySelectorSpecificity);\n}\nfunction toHaveAccessibleName(htmlElement, expectedAccessibleName) {\n  checkHtmlElement(htmlElement, toHaveAccessibleName, this);\n  const actualAccessibleName = computeAccessibleName(htmlElement);\n  const missingExpectedValue = arguments.length === 1;\n  let pass = false;\n  if (missingExpectedValue) {\n    // When called without an expected value we only want to validate that the element has an\n    // accessible name, whatever it may be.\n    pass = actualAccessibleName !== '';\n  } else {\n    pass = expectedAccessibleName instanceof RegExp ? expectedAccessibleName.test(actualAccessibleName) : this.equals(actualAccessibleName, expectedAccessibleName);\n  }\n  return {\n    pass,\n    message: () => {\n      const to = this.isNot ? 'not to' : 'to';\n      return getMessage(this, this.utils.matcherHint(`${this.isNot ? '.not' : ''}.${toHaveAccessibleName.name}`, 'element', ''), `Expected element ${to} have accessible name`, expectedAccessibleName, 'Received', actualAccessibleName);\n    }\n  };\n}\nfunction printAttribute(stringify, name, value) {\n  return value === undefined ? name : `${name}=${stringify(value)}`;\n}\nfunction getAttributeComment(stringify, name, value) {\n  return value === undefined ? `element.hasAttribute(${stringify(name)})` : `element.getAttribute(${stringify(name)}) === ${stringify(value)}`;\n}\nfunction toHaveAttribute(htmlElement, name, expectedValue) {\n  checkHtmlElement(htmlElement, toHaveAttribute, this);\n  const isExpectedValuePresent = expectedValue !== undefined;\n  const hasAttribute = htmlElement.hasAttribute(name);\n  const receivedValue = htmlElement.getAttribute(name);\n  return {\n    pass: isExpectedValuePresent ? hasAttribute && this.equals(receivedValue, expectedValue) : hasAttribute,\n    message: () => {\n      const to = this.isNot ? 'not to' : 'to';\n      const receivedAttribute = hasAttribute ? printAttribute(this.utils.stringify, name, receivedValue) : null;\n      const matcher = this.utils.matcherHint(`${this.isNot ? '.not' : ''}.toHaveAttribute`, 'element', this.utils.printExpected(name), {\n        secondArgument: isExpectedValuePresent ? this.utils.printExpected(expectedValue) : undefined,\n        comment: getAttributeComment(this.utils.stringify, name, expectedValue)\n      });\n      return getMessage(this, matcher, `Expected the element ${to} have attribute`, printAttribute(this.utils.stringify, name, expectedValue), 'Received', receivedAttribute);\n    }\n  };\n}\nfunction getExpectedClassNamesAndOptions(params) {\n  const lastParam = params.pop();\n  let expectedClassNames, options;\n  if (typeof lastParam === 'object' && !(lastParam instanceof RegExp)) {\n    expectedClassNames = params;\n    options = lastParam;\n  } else {\n    expectedClassNames = params.concat(lastParam);\n    options = {\n      exact: false\n    };\n  }\n  return {\n    expectedClassNames,\n    options\n  };\n}\nfunction splitClassNames(str) {\n  if (!str) return [];\n  return str.split(/\\s+/).filter(s => s.length > 0);\n}\nfunction isSubset$1(subset, superset) {\n  return subset.every(strOrRegexp => typeof strOrRegexp === 'string' ? superset.includes(strOrRegexp) : superset.some(className => strOrRegexp.test(className)));\n}\nfunction toHaveClass(htmlElement, ...params) {\n  checkHtmlElement(htmlElement, toHaveClass, this);\n  const {\n    expectedClassNames,\n    options\n  } = getExpectedClassNamesAndOptions(params);\n  const received = splitClassNames(htmlElement.getAttribute('class'));\n  const expected = expectedClassNames.reduce((acc, className) => acc.concat(typeof className === 'string' || !className ? splitClassNames(className) : className), []);\n  const hasRegExp = expected.some(className => className instanceof RegExp);\n  if (options.exact && hasRegExp) {\n    throw new Error('Exact option does not support RegExp expected class names');\n  }\n  if (options.exact) {\n    return {\n      pass: isSubset$1(expected, received) && expected.length === received.length,\n      message: () => {\n        const to = this.isNot ? 'not to' : 'to';\n        return getMessage(this, this.utils.matcherHint(`${this.isNot ? '.not' : ''}.toHaveClass`, 'element', this.utils.printExpected(expected.join(' '))), `Expected the element ${to} have EXACTLY defined classes`, expected.join(' '), 'Received', received.join(' '));\n      }\n    };\n  }\n  return expected.length > 0 ? {\n    pass: isSubset$1(expected, received),\n    message: () => {\n      const to = this.isNot ? 'not to' : 'to';\n      return getMessage(this, this.utils.matcherHint(`${this.isNot ? '.not' : ''}.toHaveClass`, 'element', this.utils.printExpected(expected.join(' '))), `Expected the element ${to} have class`, expected.join(' '), 'Received', received.join(' '));\n    }\n  } : {\n    pass: this.isNot ? received.length > 0 : false,\n    message: () => this.isNot ? getMessage(this, this.utils.matcherHint('.not.toHaveClass', 'element', ''), 'Expected the element to have classes', '(none)', 'Received', received.join(' ')) : [this.utils.matcherHint(`.toHaveClass`, 'element'), 'At least one expected class must be provided.'].join('\\n')\n  };\n}\nfunction getStyleDeclaration(document, css) {\n  const styles = {};\n\n  // The next block is necessary to normalize colors\n  const copy = document.createElement('div');\n  Object.keys(css).forEach(property => {\n    copy.style[property] = css[property];\n    styles[property] = copy.style[property];\n  });\n  return styles;\n}\nfunction isSubset(styles, computedStyle) {\n  return !!Object.keys(styles).length && Object.entries(styles).every(([prop, value]) => {\n    const isCustomProperty = prop.startsWith('--');\n    const spellingVariants = [prop];\n    if (!isCustomProperty) spellingVariants.push(prop.toLowerCase());\n    return spellingVariants.some(name => computedStyle[name] === value || computedStyle.getPropertyValue(name) === value);\n  });\n}\nfunction printoutStyles(styles) {\n  return Object.keys(styles).sort().map(prop => `${prop}: ${styles[prop]};`).join('\\n');\n}\n\n// Highlights only style rules that were expected but were not found in the\n// received computed styles\nfunction expectedDiff(diffFn, expected, computedStyles) {\n  const received = Array.from(computedStyles).filter(prop => expected[prop] !== undefined).reduce((obj, prop) => Object.assign(obj, {\n    [prop]: computedStyles.getPropertyValue(prop)\n  }), {});\n  const diffOutput = diffFn(printoutStyles(expected), printoutStyles(received));\n  // Remove the \"+ Received\" annotation because this is a one-way diff\n  return diffOutput.replace(`${chalk.red('+ Received')}\\n`, '');\n}\nfunction toHaveStyle(htmlElement, css) {\n  checkHtmlElement(htmlElement, toHaveStyle, this);\n  const parsedCSS = typeof css === 'object' ? css : parseCSS(css, toHaveStyle, this);\n  const {\n    getComputedStyle\n  } = htmlElement.ownerDocument.defaultView;\n  const expected = getStyleDeclaration(htmlElement.ownerDocument, parsedCSS);\n  const received = getComputedStyle(htmlElement);\n  return {\n    pass: isSubset(expected, received),\n    message: () => {\n      const matcher = `${this.isNot ? '.not' : ''}.toHaveStyle`;\n      return [this.utils.matcherHint(matcher, 'element', ''), expectedDiff(this.utils.diff, expected, received)].join('\\n\\n');\n    }\n  };\n}\nfunction toHaveFocus(element) {\n  checkHtmlElement(element, toHaveFocus, this);\n  return {\n    pass: element.ownerDocument.activeElement === element,\n    message: () => {\n      return [this.utils.matcherHint(`${this.isNot ? '.not' : ''}.toHaveFocus`, 'element', ''), '', ...(this.isNot ? ['Received element is focused:', `  ${this.utils.printReceived(element)}`] : ['Expected element with focus:', `  ${this.utils.printExpected(element)}`, 'Received element with focus:', `  ${this.utils.printReceived(element.ownerDocument.activeElement)}`])].join('\\n');\n    }\n  };\n}\n\n// Returns the combined value of several elements that have the same name\n// e.g. radio buttons or groups of checkboxes\nfunction getMultiElementValue(elements) {\n  const types = [...new Set(elements.map(element => element.type))];\n  if (types.length !== 1) {\n    throw new Error('Multiple form elements with the same name must be of the same type');\n  }\n  switch (types[0]) {\n    case 'radio':\n      {\n        const theChosenOne = elements.find(radio => radio.checked);\n        return theChosenOne ? theChosenOne.value : undefined;\n      }\n    case 'checkbox':\n      return elements.filter(checkbox => checkbox.checked).map(checkbox => checkbox.value);\n    default:\n      // NOTE: Not even sure this is a valid use case, but just in case...\n      return elements.map(element => element.value);\n  }\n}\nfunction getFormValue(container, name) {\n  const elements = [...container.querySelectorAll(`[name=\"${escape(name)}\"]`)];\n  /* istanbul ignore if */\n  if (elements.length === 0) {\n    return undefined; // shouldn't happen, but just in case\n  }\n  switch (elements.length) {\n    case 1:\n      return getSingleElementValue(elements[0]);\n    default:\n      return getMultiElementValue(elements);\n  }\n}\n\n// Strips the `[]` suffix off a form value name\nfunction getPureName(name) {\n  return /\\[\\]$/.test(name) ? name.slice(0, -2) : name;\n}\nfunction getAllFormValues(container) {\n  const names = Array.from(container.elements).map(element => element.name);\n  return names.reduce((obj, name) => ({\n    ...obj,\n    [getPureName(name)]: getFormValue(container, name)\n  }), {});\n}\nfunction toHaveFormValues(formElement, expectedValues) {\n  checkHtmlElement(formElement, toHaveFormValues, this);\n  if (!formElement.elements) {\n    // TODO: Change condition to use instanceof against the appropriate element classes instead\n    throw new Error('toHaveFormValues must be called on a form or a fieldset');\n  }\n  const formValues = getAllFormValues(formElement);\n  return {\n    pass: Object.entries(expectedValues).every(([name, expectedValue]) => isEqualWith(formValues[name], expectedValue, compareArraysAsSet)),\n    message: () => {\n      const to = this.isNot ? 'not to' : 'to';\n      const matcher = `${this.isNot ? '.not' : ''}.toHaveFormValues`;\n      const commonKeyValues = Object.keys(formValues).filter(key => expectedValues.hasOwnProperty(key)).reduce((obj, key) => ({\n        ...obj,\n        [key]: formValues[key]\n      }), {});\n      return [this.utils.matcherHint(matcher, 'element', ''), `Expected the element ${to} have form values`, this.utils.diff(expectedValues, commonKeyValues)].join('\\n\\n');\n    }\n  };\n}\nfunction isStyleVisible(element) {\n  const {\n    getComputedStyle\n  } = element.ownerDocument.defaultView;\n  const {\n    display,\n    visibility,\n    opacity\n  } = getComputedStyle(element);\n  return display !== 'none' && visibility !== 'hidden' && visibility !== 'collapse' && opacity !== '0' && opacity !== 0;\n}\nfunction isAttributeVisible(element, previousElement) {\n  let detailsVisibility;\n  if (previousElement) {\n    detailsVisibility = element.nodeName === 'DETAILS' && previousElement.nodeName !== 'SUMMARY' ? element.hasAttribute('open') : true;\n  } else {\n    detailsVisibility = element.nodeName === 'DETAILS' ? element.hasAttribute('open') : true;\n  }\n  return !element.hasAttribute('hidden') && detailsVisibility;\n}\nfunction isElementVisible(element, previousElement) {\n  return isStyleVisible(element) && isAttributeVisible(element, previousElement) && (!element.parentElement || isElementVisible(element.parentElement, element));\n}\nfunction toBeVisible(element) {\n  checkHtmlElement(element, toBeVisible, this);\n  const isInDocument = element.ownerDocument === element.getRootNode({\n    composed: true\n  });\n  const isVisible = isInDocument && isElementVisible(element);\n  return {\n    pass: isVisible,\n    message: () => {\n      const is = isVisible ? 'is' : 'is not';\n      return [this.utils.matcherHint(`${this.isNot ? '.not' : ''}.toBeVisible`, 'element', ''), '', `Received element ${is} visible${isInDocument ? '' : ' (element is not in the document)'}:`, `  ${this.utils.printReceived(element.cloneNode(false))}`].join('\\n');\n    }\n  };\n}\n\n// form elements that support 'disabled'\nconst FORM_TAGS$2 = ['fieldset', 'input', 'select', 'optgroup', 'option', 'button', 'textarea'];\n\n/*\n * According to specification:\n * If <fieldset> is disabled, the form controls that are its descendants,\n * except descendants of its first optional <legend> element, are disabled\n *\n * https://html.spec.whatwg.org/multipage/form-elements.html#concept-fieldset-disabled\n *\n * This method tests whether element is first legend child of fieldset parent\n */\nfunction isFirstLegendChildOfFieldset(element, parent) {\n  return getTag(element) === 'legend' && getTag(parent) === 'fieldset' && element.isSameNode(Array.from(parent.children).find(child => getTag(child) === 'legend'));\n}\nfunction isElementDisabledByParent(element, parent) {\n  return isElementDisabled(parent) && !isFirstLegendChildOfFieldset(element, parent);\n}\nfunction isCustomElement(tag) {\n  return tag.includes('-');\n}\n\n/*\n * Only certain form elements and custom elements can actually be disabled:\n * https://html.spec.whatwg.org/multipage/semantics-other.html#disabled-elements\n */\nfunction canElementBeDisabled(element) {\n  const tag = getTag(element);\n  return FORM_TAGS$2.includes(tag) || isCustomElement(tag);\n}\nfunction isElementDisabled(element) {\n  return canElementBeDisabled(element) && element.hasAttribute('disabled');\n}\nfunction isAncestorDisabled(element) {\n  const parent = element.parentElement;\n  return Boolean(parent) && (isElementDisabledByParent(element, parent) || isAncestorDisabled(parent));\n}\nfunction isElementOrAncestorDisabled(element) {\n  return canElementBeDisabled(element) && (isElementDisabled(element) || isAncestorDisabled(element));\n}\nfunction toBeDisabled(element) {\n  checkHtmlElement(element, toBeDisabled, this);\n  const isDisabled = isElementOrAncestorDisabled(element);\n  return {\n    pass: isDisabled,\n    message: () => {\n      const is = isDisabled ? 'is' : 'is not';\n      return [this.utils.matcherHint(`${this.isNot ? '.not' : ''}.toBeDisabled`, 'element', ''), '', `Received element ${is} disabled:`, `  ${this.utils.printReceived(element.cloneNode(false))}`].join('\\n');\n    }\n  };\n}\nfunction toBeEnabled(element) {\n  checkHtmlElement(element, toBeEnabled, this);\n  const isEnabled = !isElementOrAncestorDisabled(element);\n  return {\n    pass: isEnabled,\n    message: () => {\n      const is = isEnabled ? 'is' : 'is not';\n      return [this.utils.matcherHint(`${this.isNot ? '.not' : ''}.toBeEnabled`, 'element', ''), '', `Received element ${is} enabled:`, `  ${this.utils.printReceived(element.cloneNode(false))}`].join('\\n');\n    }\n  };\n}\n\n// form elements that support 'required'\nconst FORM_TAGS$1 = ['select', 'textarea'];\nconst ARIA_FORM_TAGS = ['input', 'select', 'textarea'];\nconst UNSUPPORTED_INPUT_TYPES = ['color', 'hidden', 'range', 'submit', 'image', 'reset'];\nconst SUPPORTED_ARIA_ROLES = ['checkbox', 'combobox', 'gridcell', 'listbox', 'radiogroup', 'spinbutton', 'textbox', 'tree'];\nfunction isRequiredOnFormTagsExceptInput(element) {\n  return FORM_TAGS$1.includes(getTag(element)) && element.hasAttribute('required');\n}\nfunction isRequiredOnSupportedInput(element) {\n  return getTag(element) === 'input' && element.hasAttribute('required') && (element.hasAttribute('type') && !UNSUPPORTED_INPUT_TYPES.includes(element.getAttribute('type')) || !element.hasAttribute('type'));\n}\nfunction isElementRequiredByARIA(element) {\n  return element.hasAttribute('aria-required') && element.getAttribute('aria-required') === 'true' && (ARIA_FORM_TAGS.includes(getTag(element)) || element.hasAttribute('role') && SUPPORTED_ARIA_ROLES.includes(element.getAttribute('role')));\n}\nfunction toBeRequired(element) {\n  checkHtmlElement(element, toBeRequired, this);\n  const isRequired = isRequiredOnFormTagsExceptInput(element) || isRequiredOnSupportedInput(element) || isElementRequiredByARIA(element);\n  return {\n    pass: isRequired,\n    message: () => {\n      const is = isRequired ? 'is' : 'is not';\n      return [this.utils.matcherHint(`${this.isNot ? '.not' : ''}.toBeRequired`, 'element', ''), '', `Received element ${is} required:`, `  ${this.utils.printReceived(element.cloneNode(false))}`].join('\\n');\n    }\n  };\n}\nconst FORM_TAGS = ['form', 'input', 'select', 'textarea'];\nfunction isElementHavingAriaInvalid(element) {\n  return element.hasAttribute('aria-invalid') && element.getAttribute('aria-invalid') !== 'false';\n}\nfunction isSupportsValidityMethod(element) {\n  return FORM_TAGS.includes(getTag(element));\n}\nfunction isElementInvalid(element) {\n  const isHaveAriaInvalid = isElementHavingAriaInvalid(element);\n  if (isSupportsValidityMethod(element)) {\n    return isHaveAriaInvalid || !element.checkValidity();\n  } else {\n    return isHaveAriaInvalid;\n  }\n}\nfunction toBeInvalid(element) {\n  checkHtmlElement(element, toBeInvalid, this);\n  const isInvalid = isElementInvalid(element);\n  return {\n    pass: isInvalid,\n    message: () => {\n      const is = isInvalid ? 'is' : 'is not';\n      return [this.utils.matcherHint(`${this.isNot ? '.not' : ''}.toBeInvalid`, 'element', ''), '', `Received element ${is} currently invalid:`, `  ${this.utils.printReceived(element.cloneNode(false))}`].join('\\n');\n    }\n  };\n}\nfunction toBeValid(element) {\n  checkHtmlElement(element, toBeValid, this);\n  const isValid = !isElementInvalid(element);\n  return {\n    pass: isValid,\n    message: () => {\n      const is = isValid ? 'is' : 'is not';\n      return [this.utils.matcherHint(`${this.isNot ? '.not' : ''}.toBeValid`, 'element', ''), '', `Received element ${is} currently valid:`, `  ${this.utils.printReceived(element.cloneNode(false))}`].join('\\n');\n    }\n  };\n}\nfunction toHaveValue(htmlElement, expectedValue) {\n  checkHtmlElement(htmlElement, toHaveValue, this);\n  if (htmlElement.tagName.toLowerCase() === 'input' && ['checkbox', 'radio'].includes(htmlElement.type)) {\n    throw new Error('input with type=checkbox or type=radio cannot be used with .toHaveValue(). Use .toBeChecked() for type=checkbox or .toHaveFormValues() instead');\n  }\n  const receivedValue = getSingleElementValue(htmlElement);\n  const expectsValue = expectedValue !== undefined;\n  let expectedTypedValue = expectedValue;\n  let receivedTypedValue = receivedValue;\n  if (expectedValue == receivedValue && expectedValue !== receivedValue) {\n    expectedTypedValue = `${expectedValue} (${typeof expectedValue})`;\n    receivedTypedValue = `${receivedValue} (${typeof receivedValue})`;\n  }\n  return {\n    pass: expectsValue ? isEqualWith(receivedValue, expectedValue, compareArraysAsSet) : Boolean(receivedValue),\n    message: () => {\n      const to = this.isNot ? 'not to' : 'to';\n      const matcher = this.utils.matcherHint(`${this.isNot ? '.not' : ''}.toHaveValue`, 'element', expectedValue);\n      return getMessage(this, matcher, `Expected the element ${to} have value`, expectsValue ? expectedTypedValue : '(any)', 'Received', receivedTypedValue);\n    }\n  };\n}\nfunction toHaveDisplayValue(htmlElement, expectedValue) {\n  checkHtmlElement(htmlElement, toHaveDisplayValue, this);\n  const tagName = htmlElement.tagName.toLowerCase();\n  if (!['select', 'input', 'textarea'].includes(tagName)) {\n    throw new Error('.toHaveDisplayValue() currently supports only input, textarea or select elements, try with another matcher instead.');\n  }\n  if (tagName === 'input' && ['radio', 'checkbox'].includes(htmlElement.type)) {\n    throw new Error(`.toHaveDisplayValue() currently does not support input[type=\"${htmlElement.type}\"], try with another matcher instead.`);\n  }\n  const values = getValues(tagName, htmlElement);\n  const expectedValues = getExpectedValues(expectedValue);\n  const numberOfMatchesWithValues = expectedValues.filter(expected => values.some(value => expected instanceof RegExp ? expected.test(value) : this.equals(value, String(expected)))).length;\n  const matchedWithAllValues = numberOfMatchesWithValues === values.length;\n  const matchedWithAllExpectedValues = numberOfMatchesWithValues === expectedValues.length;\n  return {\n    pass: matchedWithAllValues && matchedWithAllExpectedValues,\n    message: () => getMessage(this, this.utils.matcherHint(`${this.isNot ? '.not' : ''}.toHaveDisplayValue`, 'element', ''), `Expected element ${this.isNot ? 'not ' : ''}to have display value`, expectedValue, 'Received', values)\n  };\n}\nfunction getValues(tagName, htmlElement) {\n  return tagName === 'select' ? Array.from(htmlElement).filter(option => option.selected).map(option => option.textContent) : [htmlElement.value];\n}\nfunction getExpectedValues(expectedValue) {\n  return expectedValue instanceof Array ? expectedValue : [expectedValue];\n}\nfunction toBeChecked(element) {\n  checkHtmlElement(element, toBeChecked, this);\n  const isValidInput = () => {\n    return element.tagName.toLowerCase() === 'input' && ['checkbox', 'radio'].includes(element.type);\n  };\n  const isValidAriaElement = () => {\n    return roleSupportsChecked(element.getAttribute('role')) && ['true', 'false'].includes(element.getAttribute('aria-checked'));\n  };\n  if (!isValidInput() && !isValidAriaElement()) {\n    return {\n      pass: false,\n      message: () => `only inputs with type=\"checkbox\" or type=\"radio\" or elements with ${supportedRolesSentence()} and a valid aria-checked attribute can be used with .toBeChecked(). Use .toHaveValue() instead`\n    };\n  }\n  const isChecked = () => {\n    if (isValidInput()) return element.checked;\n    return element.getAttribute('aria-checked') === 'true';\n  };\n  return {\n    pass: isChecked(),\n    message: () => {\n      const is = isChecked() ? 'is' : 'is not';\n      return [this.utils.matcherHint(`${this.isNot ? '.not' : ''}.toBeChecked`, 'element', ''), '', `Received element ${is} checked:`, `  ${this.utils.printReceived(element.cloneNode(false))}`].join('\\n');\n    }\n  };\n}\nfunction supportedRolesSentence() {\n  return toSentence(supportedRoles().map(role => `role=\"${role}\"`), {\n    lastWordConnector: ' or '\n  });\n}\nfunction supportedRoles() {\n  return roles.keys().filter(roleSupportsChecked);\n}\nfunction roleSupportsChecked(role) {\n  return roles.get(role)?.props['aria-checked'] !== undefined;\n}\nfunction toBePartiallyChecked(element) {\n  checkHtmlElement(element, toBePartiallyChecked, this);\n  const isValidInput = () => {\n    return element.tagName.toLowerCase() === 'input' && element.type === 'checkbox';\n  };\n  const isValidAriaElement = () => {\n    return element.getAttribute('role') === 'checkbox';\n  };\n  if (!isValidInput() && !isValidAriaElement()) {\n    return {\n      pass: false,\n      message: () => 'only inputs with type=\"checkbox\" or elements with role=\"checkbox\" and a valid aria-checked attribute can be used with .toBePartiallyChecked(). Use .toHaveValue() instead'\n    };\n  }\n  const isPartiallyChecked = () => {\n    const isAriaMixed = element.getAttribute('aria-checked') === 'mixed';\n    if (isValidInput()) {\n      return element.indeterminate || isAriaMixed;\n    }\n    return isAriaMixed;\n  };\n  return {\n    pass: isPartiallyChecked(),\n    message: () => {\n      const is = isPartiallyChecked() ? 'is' : 'is not';\n      return [this.utils.matcherHint(`${this.isNot ? '.not' : ''}.toBePartiallyChecked`, 'element', ''), '', `Received element ${is} partially checked:`, `  ${this.utils.printReceived(element.cloneNode(false))}`].join('\\n');\n    }\n  };\n}\n\n// See algoritm: https://www.w3.org/TR/accname-1.1/#mapping_additional_nd_description\nfunction toHaveDescription(htmlElement, checkWith) {\n  deprecate('toHaveDescription', 'Please use toHaveAccessibleDescription.');\n  checkHtmlElement(htmlElement, toHaveDescription, this);\n  const expectsDescription = checkWith !== undefined;\n  const descriptionIDRaw = htmlElement.getAttribute('aria-describedby') || '';\n  const descriptionIDs = descriptionIDRaw.split(/\\s+/).filter(Boolean);\n  let description = '';\n  if (descriptionIDs.length > 0) {\n    const document = htmlElement.ownerDocument;\n    const descriptionEls = descriptionIDs.map(descriptionID => document.getElementById(descriptionID)).filter(Boolean);\n    description = normalize(descriptionEls.map(el => el.textContent).join(' '));\n  }\n  return {\n    pass: expectsDescription ? checkWith instanceof RegExp ? checkWith.test(description) : this.equals(description, checkWith) : Boolean(description),\n    message: () => {\n      const to = this.isNot ? 'not to' : 'to';\n      return getMessage(this, this.utils.matcherHint(`${this.isNot ? '.not' : ''}.toHaveDescription`, 'element', ''), `Expected the element ${to} have description`, this.utils.printExpected(checkWith), 'Received', this.utils.printReceived(description));\n    }\n  };\n}\n\n// See aria-errormessage spec https://www.w3.org/TR/wai-aria-1.2/#aria-errormessage\nfunction toHaveErrorMessage(htmlElement, checkWith) {\n  deprecate('toHaveErrorMessage', 'Please use toHaveAccessibleErrorMessage.');\n  checkHtmlElement(htmlElement, toHaveErrorMessage, this);\n  if (!htmlElement.hasAttribute('aria-invalid') || htmlElement.getAttribute('aria-invalid') === 'false') {\n    const not = this.isNot ? '.not' : '';\n    return {\n      pass: false,\n      message: () => {\n        return getMessage(this, this.utils.matcherHint(`${not}.toHaveErrorMessage`, 'element', ''), `Expected the element to have invalid state indicated by`, 'aria-invalid=\"true\"', 'Received', htmlElement.hasAttribute('aria-invalid') ? `aria-invalid=\"${htmlElement.getAttribute('aria-invalid')}\"` : this.utils.printReceived(''));\n      }\n    };\n  }\n  const expectsErrorMessage = checkWith !== undefined;\n  const errormessageIDRaw = htmlElement.getAttribute('aria-errormessage') || '';\n  const errormessageIDs = errormessageIDRaw.split(/\\s+/).filter(Boolean);\n  let errormessage = '';\n  if (errormessageIDs.length > 0) {\n    const document = htmlElement.ownerDocument;\n    const errormessageEls = errormessageIDs.map(errormessageID => document.getElementById(errormessageID)).filter(Boolean);\n    errormessage = normalize(errormessageEls.map(el => el.textContent).join(' '));\n  }\n  return {\n    pass: expectsErrorMessage ? checkWith instanceof RegExp ? checkWith.test(errormessage) : this.equals(errormessage, checkWith) : Boolean(errormessage),\n    message: () => {\n      const to = this.isNot ? 'not to' : 'to';\n      return getMessage(this, this.utils.matcherHint(`${this.isNot ? '.not' : ''}.toHaveErrorMessage`, 'element', ''), `Expected the element ${to} have error message`, this.utils.printExpected(checkWith), 'Received', this.utils.printReceived(errormessage));\n    }\n  };\n}\nvar extensions = /*#__PURE__*/Object.freeze({\n  __proto__: null,\n  toBeChecked: toBeChecked,\n  toBeDisabled: toBeDisabled,\n  toBeEmpty: toBeEmpty,\n  toBeEmptyDOMElement: toBeEmptyDOMElement,\n  toBeEnabled: toBeEnabled,\n  toBeInTheDOM: toBeInTheDOM,\n  toBeInTheDocument: toBeInTheDocument,\n  toBeInvalid: toBeInvalid,\n  toBePartiallyChecked: toBePartiallyChecked,\n  toBeRequired: toBeRequired,\n  toBeValid: toBeValid,\n  toBeVisible: toBeVisible,\n  toContainElement: toContainElement,\n  toContainHTML: toContainHTML,\n  toHaveAccessibleDescription: toHaveAccessibleDescription,\n  toHaveAccessibleErrorMessage: toHaveAccessibleErrorMessage,\n  toHaveAccessibleName: toHaveAccessibleName,\n  toHaveAttribute: toHaveAttribute,\n  toHaveClass: toHaveClass,\n  toHaveDescription: toHaveDescription,\n  toHaveDisplayValue: toHaveDisplayValue,\n  toHaveErrorMessage: toHaveErrorMessage,\n  toHaveFocus: toHaveFocus,\n  toHaveFormValues: toHaveFormValues,\n  toHaveRole: toHaveRole,\n  toHaveStyle: toHaveStyle,\n  toHaveTextContent: toHaveTextContent,\n  toHaveValue: toHaveValue\n});\nexport { toBePartiallyChecked as A, toHaveDescription as B, toHaveErrorMessage as C, toBeInTheDocument as a, toBeEmpty as b, toBeEmptyDOMElement as c, toContainElement as d, extensions as e, toContainHTML as f, toHaveTextContent as g, toHaveAccessibleDescription as h, toHaveAccessibleErrorMessage as i, toHaveRole as j, toHaveAccessibleName as k, toHaveAttribute as l, toHaveClass as m, toHaveStyle as n, toHaveFocus as o, toHaveFormValues as p, toBeVisible as q, toBeDisabled as r, toBeEnabled as s, toBeInTheDOM as t, toBeRequired as u, toBeInvalid as v, toBeValid as w, toHaveValue as x, toHaveDisplayValue as y, toBeChecked as z };","map":{"version":3,"names":["redent","parse","computeAccessibleDescription","computeAccessibleName","elementRoles","roles","chalk","isEqualWith","escape","GenericTypeError","Error","constructor","expectedString","received","matcherFn","context","captureStackTrace","withType","utils","printWithType","printReceived","e","message","matcherHint","isNot","name","RECEIVED_COLOR","join","HtmlElementTypeError","args","NodeTypeError","checkHasWindow","htmlElement","ErrorClass","ownerDocument","defaultView","checkNode","node","window","Node","checkHtmlElement","HTMLElement","SVGElement","InvalidCSSError","css","parseCSS","ast","silent","stylesheet","parsingErrors","length","reason","line","parsedRules","rules","declarations","filter","d","type","reduce","obj","property","value","Object","assign","display","stringify","getMessage","matcher","expectedLabel","expectedValue","receivedLabel","receivedValue","EXPECTED_COLOR","matches","textToMatch","RegExp","test","includes","String","deprecate","replacementText","console","warn","normalize","text","replace","trim","getTag","element","tagName","toLowerCase","getSelectValue","multiple","options","selectedOptions","option","selected","map","opt","undefined","getInputValue","inputElement","Number","checked","getSingleElementValue","toSentence","array","wordConnector","lastWordConnector","slice","compareArraysAsSet","arr1","arr2","Array","isArray","Set","every","v","has","toBeInTheDOM","container","pass","contains","cloneNode","toBeInTheDocument","getRootNode","composed","errorFound","errorNotFound","toBeEmpty","innerHTML","toBeEmptyDOMElement","isEmptyElement","nonCommentChildNodes","childNodes","nodeType","toContainElement","getNormalizedHtml","htmlText","div","createElement","toContainHTML","outerHTML","toHaveTextContent","checkWith","normalizeWhitespace","textContent","checkingWithEmptyString","to","toHaveAccessibleDescription","expectedAccessibleDescription","actualAccessibleDescription","missingExpectedValue","arguments","equals","ariaInvalidName","validStates","toHaveAccessibleErrorMessage","expectedAccessibleErrorMessage","method","errormessageId","getAttribute","errormessageIdInvalid","ariaInvalidVal","fieldValid","hasAttribute","error","getElementById","Boolean","elementRoleList","buildElementRoleList","toHaveRole","expectedRole","actualRoles","getExplicitOrImplicitRoles","some","el","hasExplicitRole","roleValue","split","implicitRoles","getImplicitAriaRoles","currentNode","match","elementRolesMap","makeElementSelector","attributes","attributeName","constraints","shouldNotExist","indexOf","getSelectorSpecificity","bySelectorSpecificity","specificity","leftSpecificity","rightSpecificity","typeTextIndex","findIndex","attribute","selector","result","entries","from","sort","toHaveAccessibleName","expectedAccessibleName","actualAccessibleName","printAttribute","getAttributeComment","toHaveAttribute","isExpectedValuePresent","receivedAttribute","printExpected","secondArgument","comment","getExpectedClassNamesAndOptions","params","lastParam","pop","expectedClassNames","concat","exact","splitClassNames","str","s","isSubset$1","subset","superset","strOrRegexp","className","toHaveClass","expected","acc","hasRegExp","getStyleDeclaration","document","styles","copy","keys","forEach","style","isSubset","computedStyle","prop","isCustomProperty","startsWith","spellingVariants","push","getPropertyValue","printoutStyles","expectedDiff","diffFn","computedStyles","diffOutput","red","toHaveStyle","parsedCSS","getComputedStyle","diff","toHaveFocus","activeElement","getMultiElementValue","elements","types","theChosenOne","find","radio","checkbox","getFormValue","querySelectorAll","getPureName","getAllFormValues","names","toHaveFormValues","formElement","expectedValues","formValues","commonKeyValues","key","hasOwnProperty","isStyleVisible","visibility","opacity","isAttributeVisible","previousElement","detailsVisibility","nodeName","isElementVisible","parentElement","toBeVisible","isInDocument","isVisible","is","FORM_TAGS$2","isFirstLegendChildOfFieldset","parent","isSameNode","children","child","isElementDisabledByParent","isElementDisabled","isCustomElement","tag","canElementBeDisabled","isAncestorDisabled","isElementOrAncestorDisabled","toBeDisabled","isDisabled","toBeEnabled","isEnabled","FORM_TAGS$1","ARIA_FORM_TAGS","UNSUPPORTED_INPUT_TYPES","SUPPORTED_ARIA_ROLES","isRequiredOnFormTagsExceptInput","isRequiredOnSupportedInput","isElementRequiredByARIA","toBeRequired","isRequired","FORM_TAGS","isElementHavingAriaInvalid","isSupportsValidityMethod","isElementInvalid","isHaveAriaInvalid","checkValidity","toBeInvalid","isInvalid","toBeValid","isValid","toHaveValue","expectsValue","expectedTypedValue","receivedTypedValue","toHaveDisplayValue","values","getValues","getExpectedValues","numberOfMatchesWithValues","matchedWithAllValues","matchedWithAllExpectedValues","toBeChecked","isValidInput","isValidAriaElement","roleSupportsChecked","supportedRolesSentence","isChecked","supportedRoles","role","get","props","toBePartiallyChecked","isPartiallyChecked","isAriaMixed","indeterminate","toHaveDescription","expectsDescription","descriptionIDRaw","descriptionIDs","description","descriptionEls","descriptionID","toHaveErrorMessage","not","expectsErrorMessage","errormessageIDRaw","errormessageIDs","errormessage","errormessageEls","errormessageID","extensions","freeze","__proto__","A","B","C","a","b","c","f","g","h","i","j","k","l","m","n","o","p","q","r","t","u","w","x","y","z"],"sources":["/Users/tamm/work/universities-list-app/node_modules/@testing-library/jest-dom/dist/matchers-15a34310.mjs"],"sourcesContent":["import redent from 'redent';\nimport { parse } from '@adobe/css-tools';\nimport { computeAccessibleDescription, computeAccessibleName } from 'dom-accessibility-api';\nimport { elementRoles, roles } from 'aria-query';\nimport chalk from 'chalk';\nimport isEqualWith from 'lodash/isEqualWith.js';\nimport escape from 'css.escape';\n\nclass GenericTypeError extends Error {\n  constructor(expectedString, received, matcherFn, context) {\n    super();\n\n    /* istanbul ignore next */\n    if (Error.captureStackTrace) {\n      Error.captureStackTrace(this, matcherFn);\n    }\n    let withType = '';\n    try {\n      withType = context.utils.printWithType(\n        'Received',\n        received,\n        context.utils.printReceived,\n      );\n    } catch (e) {\n      // Can throw for Document:\n      // https://github.com/jsdom/jsdom/issues/2304\n    }\n    this.message = [\n      context.utils.matcherHint(\n        `${context.isNot ? '.not' : ''}.${matcherFn.name}`,\n        'received',\n        '',\n      ),\n      '',\n      // eslint-disable-next-line new-cap\n      `${context.utils.RECEIVED_COLOR(\n        'received',\n      )} value must ${expectedString}.`,\n      withType,\n    ].join('\\n');\n  }\n}\n\nclass HtmlElementTypeError extends GenericTypeError {\n  constructor(...args) {\n    super('be an HTMLElement or an SVGElement', ...args);\n  }\n}\n\nclass NodeTypeError extends GenericTypeError {\n  constructor(...args) {\n    super('be a Node', ...args);\n  }\n}\n\nfunction checkHasWindow(htmlElement, ErrorClass, ...args) {\n  if (\n    !htmlElement ||\n    !htmlElement.ownerDocument ||\n    !htmlElement.ownerDocument.defaultView\n  ) {\n    throw new ErrorClass(htmlElement, ...args)\n  }\n}\n\nfunction checkNode(node, ...args) {\n  checkHasWindow(node, NodeTypeError, ...args);\n  const window = node.ownerDocument.defaultView;\n\n  if (!(node instanceof window.Node)) {\n    throw new NodeTypeError(node, ...args)\n  }\n}\n\nfunction checkHtmlElement(htmlElement, ...args) {\n  checkHasWindow(htmlElement, HtmlElementTypeError, ...args);\n  const window = htmlElement.ownerDocument.defaultView;\n\n  if (\n    !(htmlElement instanceof window.HTMLElement) &&\n    !(htmlElement instanceof window.SVGElement)\n  ) {\n    throw new HtmlElementTypeError(htmlElement, ...args)\n  }\n}\n\nclass InvalidCSSError extends Error {\n  constructor(received, matcherFn, context) {\n    super();\n\n    /* istanbul ignore next */\n    if (Error.captureStackTrace) {\n      Error.captureStackTrace(this, matcherFn);\n    }\n    this.message = [\n      received.message,\n      '',\n      // eslint-disable-next-line new-cap\n      context.utils.RECEIVED_COLOR(`Failing css:`),\n      // eslint-disable-next-line new-cap\n      context.utils.RECEIVED_COLOR(`${received.css}`),\n    ].join('\\n');\n  }\n}\n\nfunction parseCSS(css, ...args) {\n  const ast = parse(`selector { ${css} }`, {silent: true}).stylesheet;\n\n  if (ast.parsingErrors && ast.parsingErrors.length > 0) {\n    const {reason, line} = ast.parsingErrors[0];\n\n    throw new InvalidCSSError(\n      {\n        css,\n        message: `Syntax error parsing expected css: ${reason} on line: ${line}`,\n      },\n      ...args,\n    )\n  }\n\n  const parsedRules = ast.rules[0].declarations\n    .filter(d => d.type === 'declaration')\n    .reduce(\n      (obj, {property, value}) => Object.assign(obj, {[property]: value}),\n      {},\n    );\n  return parsedRules\n}\n\nfunction display(context, value) {\n  return typeof value === 'string' ? value : context.utils.stringify(value)\n}\n\nfunction getMessage(\n  context,\n  matcher,\n  expectedLabel,\n  expectedValue,\n  receivedLabel,\n  receivedValue,\n) {\n  return [\n    `${matcher}\\n`,\n    // eslint-disable-next-line new-cap\n    `${expectedLabel}:\\n${context.utils.EXPECTED_COLOR(\n      redent(display(context, expectedValue), 2),\n    )}`,\n    // eslint-disable-next-line new-cap\n    `${receivedLabel}:\\n${context.utils.RECEIVED_COLOR(\n      redent(display(context, receivedValue), 2),\n    )}`,\n  ].join('\\n')\n}\n\nfunction matches(textToMatch, matcher) {\n  if (matcher instanceof RegExp) {\n    return matcher.test(textToMatch)\n  } else {\n    return textToMatch.includes(String(matcher))\n  }\n}\n\nfunction deprecate(name, replacementText) {\n  // Notify user that they are using deprecated functionality.\n  // eslint-disable-next-line no-console\n  console.warn(\n    `Warning: ${name} has been deprecated and will be removed in future updates.`,\n    replacementText,\n  );\n}\n\nfunction normalize(text) {\n  return text.replace(/\\s+/g, ' ').trim()\n}\n\nfunction getTag(element) {\n  return element.tagName && element.tagName.toLowerCase()\n}\n\nfunction getSelectValue({multiple, options}) {\n  const selectedOptions = [...options].filter(option => option.selected);\n\n  if (multiple) {\n    return [...selectedOptions].map(opt => opt.value)\n  }\n  /* istanbul ignore if */\n  if (selectedOptions.length === 0) {\n    return undefined // Couldn't make this happen, but just in case\n  }\n  return selectedOptions[0].value\n}\n\nfunction getInputValue(inputElement) {\n  switch (inputElement.type) {\n    case 'number':\n      return inputElement.value === '' ? null : Number(inputElement.value)\n    case 'checkbox':\n      return inputElement.checked\n    default:\n      return inputElement.value\n  }\n}\n\nfunction getSingleElementValue(element) {\n  /* istanbul ignore if */\n  if (!element) {\n    return undefined\n  }\n  switch (element.tagName.toLowerCase()) {\n    case 'input':\n      return getInputValue(element)\n    case 'select':\n      return getSelectValue(element)\n    default:\n      return element.value\n  }\n}\n\nfunction toSentence(\n  array,\n  {wordConnector = ', ', lastWordConnector = ' and '} = {},\n) {\n  return [array.slice(0, -1).join(wordConnector), array[array.length - 1]].join(\n    array.length > 1 ? lastWordConnector : '',\n  )\n}\n\nfunction compareArraysAsSet(arr1, arr2) {\n  if (Array.isArray(arr1) && Array.isArray(arr2)) {\n    return [...new Set(arr1)].every(v => new Set(arr2).has(v))\n  }\n  return undefined\n}\n\nfunction toBeInTheDOM(element, container) {\n  deprecate(\n    'toBeInTheDOM',\n    'Please use toBeInTheDocument for searching the entire document and toContainElement for searching a specific container.',\n  );\n\n  if (element) {\n    checkHtmlElement(element, toBeInTheDOM, this);\n  }\n\n  if (container) {\n    checkHtmlElement(container, toBeInTheDOM, this);\n  }\n\n  return {\n    pass: container ? container.contains(element) : !!element,\n    message: () => {\n      return [\n        this.utils.matcherHint(\n          `${this.isNot ? '.not' : ''}.toBeInTheDOM`,\n          'element',\n          '',\n        ),\n        '',\n        'Received:',\n        `  ${this.utils.printReceived(\n          element ? element.cloneNode(false) : element,\n        )}`,\n      ].join('\\n')\n    },\n  }\n}\n\nfunction toBeInTheDocument(element) {\n  if (element !== null || !this.isNot) {\n    checkHtmlElement(element, toBeInTheDocument, this);\n  }\n\n  const pass =\n    element === null\n      ? false\n      : element.ownerDocument === element.getRootNode({composed: true});\n\n  const errorFound = () => {\n    return `expected document not to contain element, found ${this.utils.stringify(\n      element.cloneNode(true),\n    )} instead`\n  };\n  const errorNotFound = () => {\n    return `element could not be found in the document`\n  };\n\n  return {\n    pass,\n    message: () => {\n      return [\n        this.utils.matcherHint(\n          `${this.isNot ? '.not' : ''}.toBeInTheDocument`,\n          'element',\n          '',\n        ),\n        '',\n        // eslint-disable-next-line new-cap\n        this.utils.RECEIVED_COLOR(this.isNot ? errorFound() : errorNotFound()),\n      ].join('\\n')\n    },\n  }\n}\n\nfunction toBeEmpty(element) {\n  deprecate(\n    'toBeEmpty',\n    'Please use instead toBeEmptyDOMElement for finding empty nodes in the DOM.',\n  );\n  checkHtmlElement(element, toBeEmpty, this);\n\n  return {\n    pass: element.innerHTML === '',\n    message: () => {\n      return [\n        this.utils.matcherHint(\n          `${this.isNot ? '.not' : ''}.toBeEmpty`,\n          'element',\n          '',\n        ),\n        '',\n        'Received:',\n        `  ${this.utils.printReceived(element.innerHTML)}`,\n      ].join('\\n')\n    },\n  }\n}\n\nfunction toBeEmptyDOMElement(element) {\n  checkHtmlElement(element, toBeEmptyDOMElement, this);\n\n  return {\n    pass: isEmptyElement(element),\n    message: () => {\n      return [\n        this.utils.matcherHint(\n          `${this.isNot ? '.not' : ''}.toBeEmptyDOMElement`,\n          'element',\n          '',\n        ),\n        '',\n        'Received:',\n        `  ${this.utils.printReceived(element.innerHTML)}`,\n      ].join('\\n')\n    },\n  }\n}\n\n/**\n * Identifies if an element doesn't contain child nodes (excluding comments)\n * â„¹ Node.COMMENT_NODE can't be used because of the following issue \n * https://github.com/jsdom/jsdom/issues/2220\n *\n * @param {*} element an HtmlElement or SVGElement\n * @return {*} true if the element only contains comments or none\n */\nfunction isEmptyElement(element){\n  const nonCommentChildNodes = [...element.childNodes].filter(node => node.nodeType !== 8);\n  return nonCommentChildNodes.length === 0;\n}\n\nfunction toContainElement(container, element) {\n  checkHtmlElement(container, toContainElement, this);\n\n  if (element !== null) {\n    checkHtmlElement(element, toContainElement, this);\n  }\n\n  return {\n    pass: container.contains(element),\n    message: () => {\n      return [\n        this.utils.matcherHint(\n          `${this.isNot ? '.not' : ''}.toContainElement`,\n          'element',\n          'element',\n        ),\n        '',\n        // eslint-disable-next-line new-cap\n        this.utils.RECEIVED_COLOR(`${this.utils.stringify(\n          container.cloneNode(false),\n        )} ${\n          this.isNot ? 'contains:' : 'does not contain:'\n        } ${this.utils.stringify(element ? element.cloneNode(false) : element)}\n        `),\n      ].join('\\n')\n    },\n  }\n}\n\nfunction getNormalizedHtml(container, htmlText) {\n  const div = container.ownerDocument.createElement('div');\n  div.innerHTML = htmlText;\n  return div.innerHTML\n}\n\nfunction toContainHTML(container, htmlText) {\n  checkHtmlElement(container, toContainHTML, this);\n\n  if (typeof htmlText !== 'string') {\n    throw new Error(`.toContainHTML() expects a string value, got ${htmlText}`)\n  }\n\n  return {\n    pass: container.outerHTML.includes(getNormalizedHtml(container, htmlText)),\n    message: () => {\n      return [\n        this.utils.matcherHint(\n          `${this.isNot ? '.not' : ''}.toContainHTML`,\n          'element',\n          '',\n        ),\n        'Expected:',\n        // eslint-disable-next-line new-cap\n        `  ${this.utils.EXPECTED_COLOR(htmlText)}`,\n        'Received:',\n        `  ${this.utils.printReceived(container.cloneNode(true))}`,\n      ].join('\\n')\n    },\n  }\n}\n\nfunction toHaveTextContent(\n  node,\n  checkWith,\n  options = {normalizeWhitespace: true},\n) {\n  checkNode(node, toHaveTextContent, this);\n\n  const textContent = options.normalizeWhitespace\n    ? normalize(node.textContent)\n    : node.textContent.replace(/\\u00a0/g, ' '); // Replace &nbsp; with normal spaces\n\n  const checkingWithEmptyString = textContent !== '' && checkWith === '';\n\n  return {\n    pass: !checkingWithEmptyString && matches(textContent, checkWith),\n    message: () => {\n      const to = this.isNot ? 'not to' : 'to';\n      return getMessage(\n        this,\n        this.utils.matcherHint(\n          `${this.isNot ? '.not' : ''}.toHaveTextContent`,\n          'element',\n          '',\n        ),\n        checkingWithEmptyString\n          ? `Checking with empty string will always match, use .toBeEmptyDOMElement() instead`\n          : `Expected element ${to} have text content`,\n        checkWith,\n        'Received',\n        textContent,\n      )\n    },\n  }\n}\n\nfunction toHaveAccessibleDescription(\n  htmlElement,\n  expectedAccessibleDescription,\n) {\n  checkHtmlElement(htmlElement, toHaveAccessibleDescription, this);\n  const actualAccessibleDescription = computeAccessibleDescription(htmlElement);\n  const missingExpectedValue = arguments.length === 1;\n\n  let pass = false;\n  if (missingExpectedValue) {\n    // When called without an expected value we only want to validate that the element has an\n    // accessible description, whatever it may be.\n    pass = actualAccessibleDescription !== '';\n  } else {\n    pass =\n      expectedAccessibleDescription instanceof RegExp\n        ? expectedAccessibleDescription.test(actualAccessibleDescription)\n        : this.equals(\n            actualAccessibleDescription,\n            expectedAccessibleDescription,\n          );\n  }\n\n  return {\n    pass,\n\n    message: () => {\n      const to = this.isNot ? 'not to' : 'to';\n      return getMessage(\n        this,\n        this.utils.matcherHint(\n          `${this.isNot ? '.not' : ''}.${toHaveAccessibleDescription.name}`,\n          'element',\n          '',\n        ),\n        `Expected element ${to} have accessible description`,\n        expectedAccessibleDescription,\n        'Received',\n        actualAccessibleDescription,\n      )\n    },\n  }\n}\n\nconst ariaInvalidName = 'aria-invalid';\nconst validStates = ['false'];\n\n// See `aria-errormessage` spec at https://www.w3.org/TR/wai-aria-1.2/#aria-errormessage\nfunction toHaveAccessibleErrorMessage(\n  htmlElement,\n  expectedAccessibleErrorMessage,\n) {\n  checkHtmlElement(htmlElement, toHaveAccessibleErrorMessage, this);\n  const to = this.isNot ? 'not to' : 'to';\n  const method = this.isNot\n    ? '.not.toHaveAccessibleErrorMessage'\n    : '.toHaveAccessibleErrorMessage';\n\n  // Enforce Valid Id\n  const errormessageId = htmlElement.getAttribute('aria-errormessage');\n  const errormessageIdInvalid = !!errormessageId && /\\s+/.test(errormessageId);\n\n  if (errormessageIdInvalid) {\n    return {\n      pass: false,\n      message: () => {\n        return getMessage(\n          this,\n          this.utils.matcherHint(method, 'element'),\n          \"Expected element's `aria-errormessage` attribute to be empty or a single, valid ID\",\n          '',\n          'Received',\n          `aria-errormessage=\"${errormessageId}\"`,\n        )\n      },\n    }\n  }\n\n  // See `aria-invalid` spec at https://www.w3.org/TR/wai-aria-1.2/#aria-invalid\n  const ariaInvalidVal = htmlElement.getAttribute(ariaInvalidName);\n  const fieldValid =\n    !htmlElement.hasAttribute(ariaInvalidName) ||\n    validStates.includes(ariaInvalidVal);\n\n  // Enforce Valid `aria-invalid` Attribute\n  if (fieldValid) {\n    return {\n      pass: false,\n      message: () => {\n        return getMessage(\n          this,\n          this.utils.matcherHint(method, 'element'),\n          'Expected element to be marked as invalid with attribute',\n          `${ariaInvalidName}=\"${String(true)}\"`,\n          'Received',\n          htmlElement.hasAttribute('aria-invalid')\n            ? `${ariaInvalidName}=\"${htmlElement.getAttribute(ariaInvalidName)}`\n            : null,\n        )\n      },\n    }\n  }\n\n  const error = normalize(\n    htmlElement.ownerDocument.getElementById(errormessageId)?.textContent ?? '',\n  );\n\n  return {\n    pass:\n      expectedAccessibleErrorMessage === undefined\n        ? Boolean(error)\n        : expectedAccessibleErrorMessage instanceof RegExp\n        ? expectedAccessibleErrorMessage.test(error)\n        : this.equals(error, expectedAccessibleErrorMessage),\n\n    message: () => {\n      return getMessage(\n        this,\n        this.utils.matcherHint(method, 'element'),\n        `Expected element ${to} have accessible error message`,\n        expectedAccessibleErrorMessage ?? '',\n        'Received',\n        error,\n      )\n    },\n  }\n}\n\nconst elementRoleList = buildElementRoleList(elementRoles);\n\nfunction toHaveRole(htmlElement, expectedRole) {\n  checkHtmlElement(htmlElement, toHaveRole, this);\n\n  const actualRoles = getExplicitOrImplicitRoles(htmlElement);\n  const pass = actualRoles.some(el => el === expectedRole);\n\n  return {\n    pass,\n\n    message: () => {\n      const to = this.isNot ? 'not to' : 'to';\n      return getMessage(\n        this,\n        this.utils.matcherHint(\n          `${this.isNot ? '.not' : ''}.${toHaveRole.name}`,\n          'element',\n          '',\n        ),\n        `Expected element ${to} have role`,\n        expectedRole,\n        'Received',\n        actualRoles.join(', '),\n      )\n    },\n  }\n}\n\nfunction getExplicitOrImplicitRoles(htmlElement) {\n  const hasExplicitRole = htmlElement.hasAttribute('role');\n\n  if (hasExplicitRole) {\n    const roleValue = htmlElement.getAttribute('role');\n\n    // Handle fallback roles, such as role=\"switch button\"\n    // testing-library gates this behind the `queryFallbacks` flag; it is\n    // unclear why, but it makes sense to support this pattern out of the box\n    // https://testing-library.com/docs/queries/byrole/#queryfallbacks\n    return roleValue.split(' ').filter(Boolean)\n  }\n\n  const implicitRoles = getImplicitAriaRoles(htmlElement);\n\n  return implicitRoles\n}\n\nfunction getImplicitAriaRoles(currentNode) {\n  for (const {match, roles} of elementRoleList) {\n    if (match(currentNode)) {\n      return [...roles]\n    }\n  }\n\n  /* istanbul ignore next */\n  return [] // this does not get reached in practice, since elements have at least a 'generic' role\n}\n\n/**\n * Transform the roles map (with required attributes and constraints) to a list\n * of roles. Each item in the list has functions to match an element against it.\n *\n * Essentially copied over from [dom-testing-library's\n * helpers](https://github.com/testing-library/dom-testing-library/blob/bd04cf95a1ed85a2238f7dfc1a77d5d16b4f59dc/src/role-helpers.js#L80)\n *\n * TODO: If we are truly just copying over stuff, would it make sense to move\n * this to a separate package?\n *\n * TODO: This technique relies on CSS selectors; are those consistently\n * available in all jest-dom environments? Why do other matchers in this package\n * not use them like this?\n */\nfunction buildElementRoleList(elementRolesMap) {\n  function makeElementSelector({name, attributes}) {\n    return `${name}${attributes\n      .map(({name: attributeName, value, constraints = []}) => {\n        const shouldNotExist = constraints.indexOf('undefined') !== -1;\n        if (shouldNotExist) {\n          return `:not([${attributeName}])`\n        } else if (value) {\n          return `[${attributeName}=\"${value}\"]`\n        } else {\n          return `[${attributeName}]`\n        }\n      })\n      .join('')}`\n  }\n\n  function getSelectorSpecificity({attributes = []}) {\n    return attributes.length\n  }\n\n  function bySelectorSpecificity(\n    {specificity: leftSpecificity},\n    {specificity: rightSpecificity},\n  ) {\n    return rightSpecificity - leftSpecificity\n  }\n\n  function match(element) {\n    let {attributes = []} = element;\n\n    // https://github.com/testing-library/dom-testing-library/issues/814\n    const typeTextIndex = attributes.findIndex(\n      attribute =>\n        attribute.value &&\n        attribute.name === 'type' &&\n        attribute.value === 'text',\n    );\n\n    if (typeTextIndex >= 0) {\n      // not using splice to not mutate the attributes array\n      attributes = [\n        ...attributes.slice(0, typeTextIndex),\n        ...attributes.slice(typeTextIndex + 1),\n      ];\n    }\n\n    const selector = makeElementSelector({...element, attributes});\n\n    return node => {\n      if (typeTextIndex >= 0 && node.type !== 'text') {\n        return false\n      }\n\n      return node.matches(selector)\n    }\n  }\n\n  let result = [];\n\n  for (const [element, roles] of elementRolesMap.entries()) {\n    result = [\n      ...result,\n      {\n        match: match(element),\n        roles: Array.from(roles),\n        specificity: getSelectorSpecificity(element),\n      },\n    ];\n  }\n\n  return result.sort(bySelectorSpecificity)\n}\n\nfunction toHaveAccessibleName(htmlElement, expectedAccessibleName) {\n  checkHtmlElement(htmlElement, toHaveAccessibleName, this);\n  const actualAccessibleName = computeAccessibleName(htmlElement);\n  const missingExpectedValue = arguments.length === 1;\n\n  let pass = false;\n  if (missingExpectedValue) {\n    // When called without an expected value we only want to validate that the element has an\n    // accessible name, whatever it may be.\n    pass = actualAccessibleName !== '';\n  } else {\n    pass =\n      expectedAccessibleName instanceof RegExp\n        ? expectedAccessibleName.test(actualAccessibleName)\n        : this.equals(actualAccessibleName, expectedAccessibleName);\n  }\n\n  return {\n    pass,\n\n    message: () => {\n      const to = this.isNot ? 'not to' : 'to';\n      return getMessage(\n        this,\n        this.utils.matcherHint(\n          `${this.isNot ? '.not' : ''}.${toHaveAccessibleName.name}`,\n          'element',\n          '',\n        ),\n        `Expected element ${to} have accessible name`,\n        expectedAccessibleName,\n        'Received',\n        actualAccessibleName,\n      )\n    },\n  }\n}\n\nfunction printAttribute(stringify, name, value) {\n  return value === undefined ? name : `${name}=${stringify(value)}`\n}\n\nfunction getAttributeComment(stringify, name, value) {\n  return value === undefined\n    ? `element.hasAttribute(${stringify(name)})`\n    : `element.getAttribute(${stringify(name)}) === ${stringify(value)}`\n}\n\nfunction toHaveAttribute(htmlElement, name, expectedValue) {\n  checkHtmlElement(htmlElement, toHaveAttribute, this);\n  const isExpectedValuePresent = expectedValue !== undefined;\n  const hasAttribute = htmlElement.hasAttribute(name);\n  const receivedValue = htmlElement.getAttribute(name);\n  return {\n    pass: isExpectedValuePresent\n      ? hasAttribute && this.equals(receivedValue, expectedValue)\n      : hasAttribute,\n    message: () => {\n      const to = this.isNot ? 'not to' : 'to';\n      const receivedAttribute = hasAttribute\n        ? printAttribute(this.utils.stringify, name, receivedValue)\n        : null;\n      const matcher = this.utils.matcherHint(\n        `${this.isNot ? '.not' : ''}.toHaveAttribute`,\n        'element',\n        this.utils.printExpected(name),\n        {\n          secondArgument: isExpectedValuePresent\n            ? this.utils.printExpected(expectedValue)\n            : undefined,\n          comment: getAttributeComment(\n            this.utils.stringify,\n            name,\n            expectedValue,\n          ),\n        },\n      );\n      return getMessage(\n        this,\n        matcher,\n        `Expected the element ${to} have attribute`,\n        printAttribute(this.utils.stringify, name, expectedValue),\n        'Received',\n        receivedAttribute,\n      )\n    },\n  }\n}\n\nfunction getExpectedClassNamesAndOptions(params) {\n  const lastParam = params.pop();\n  let expectedClassNames, options;\n\n  if (typeof lastParam === 'object' && !(lastParam instanceof RegExp)) {\n    expectedClassNames = params;\n    options = lastParam;\n  } else {\n    expectedClassNames = params.concat(lastParam);\n    options = {exact: false};\n  }\n  return {expectedClassNames, options}\n}\n\nfunction splitClassNames(str) {\n  if (!str) return []\n  return str.split(/\\s+/).filter(s => s.length > 0)\n}\n\nfunction isSubset$1(subset, superset) {\n  return subset.every(strOrRegexp =>\n    typeof strOrRegexp === 'string'\n      ? superset.includes(strOrRegexp)\n      : superset.some(className => strOrRegexp.test(className)),\n  )\n}\n\nfunction toHaveClass(htmlElement, ...params) {\n  checkHtmlElement(htmlElement, toHaveClass, this);\n  const {expectedClassNames, options} = getExpectedClassNamesAndOptions(params);\n\n  const received = splitClassNames(htmlElement.getAttribute('class'));\n  const expected = expectedClassNames.reduce(\n    (acc, className) =>\n      acc.concat(\n        typeof className === 'string' || !className\n          ? splitClassNames(className)\n          : className,\n      ),\n    [],\n  );\n\n  const hasRegExp = expected.some(className => className instanceof RegExp);\n  if (options.exact && hasRegExp) {\n    throw new Error('Exact option does not support RegExp expected class names')\n  }\n\n  if (options.exact) {\n    return {\n      pass: isSubset$1(expected, received) && expected.length === received.length,\n      message: () => {\n        const to = this.isNot ? 'not to' : 'to';\n        return getMessage(\n          this,\n          this.utils.matcherHint(\n            `${this.isNot ? '.not' : ''}.toHaveClass`,\n            'element',\n            this.utils.printExpected(expected.join(' ')),\n          ),\n          `Expected the element ${to} have EXACTLY defined classes`,\n          expected.join(' '),\n          'Received',\n          received.join(' '),\n        )\n      },\n    }\n  }\n\n  return expected.length > 0\n    ? {\n        pass: isSubset$1(expected, received),\n        message: () => {\n          const to = this.isNot ? 'not to' : 'to';\n          return getMessage(\n            this,\n            this.utils.matcherHint(\n              `${this.isNot ? '.not' : ''}.toHaveClass`,\n              'element',\n              this.utils.printExpected(expected.join(' ')),\n            ),\n            `Expected the element ${to} have class`,\n            expected.join(' '),\n            'Received',\n            received.join(' '),\n          )\n        },\n      }\n    : {\n        pass: this.isNot ? received.length > 0 : false,\n        message: () =>\n          this.isNot\n            ? getMessage(\n                this,\n                this.utils.matcherHint('.not.toHaveClass', 'element', ''),\n                'Expected the element to have classes',\n                '(none)',\n                'Received',\n                received.join(' '),\n              )\n            : [\n                this.utils.matcherHint(`.toHaveClass`, 'element'),\n                'At least one expected class must be provided.',\n              ].join('\\n'),\n      }\n}\n\nfunction getStyleDeclaration(document, css) {\n  const styles = {};\n\n  // The next block is necessary to normalize colors\n  const copy = document.createElement('div');\n  Object.keys(css).forEach(property => {\n    copy.style[property] = css[property];\n    styles[property] = copy.style[property];\n  });\n\n  return styles\n}\n\nfunction isSubset(styles, computedStyle) {\n  return (\n    !!Object.keys(styles).length &&\n    Object.entries(styles).every(([prop, value]) => {\n      const isCustomProperty = prop.startsWith('--');\n      const spellingVariants = [prop];\n      if (!isCustomProperty) spellingVariants.push(prop.toLowerCase());\n\n      return spellingVariants.some(\n        name =>\n          computedStyle[name] === value ||\n          computedStyle.getPropertyValue(name) === value,\n      )\n    })\n  )\n}\n\nfunction printoutStyles(styles) {\n  return Object.keys(styles)\n    .sort()\n    .map(prop => `${prop}: ${styles[prop]};`)\n    .join('\\n')\n}\n\n// Highlights only style rules that were expected but were not found in the\n// received computed styles\nfunction expectedDiff(diffFn, expected, computedStyles) {\n  const received = Array.from(computedStyles)\n    .filter(prop => expected[prop] !== undefined)\n    .reduce(\n      (obj, prop) =>\n        Object.assign(obj, {[prop]: computedStyles.getPropertyValue(prop)}),\n      {},\n    );\n  const diffOutput = diffFn(printoutStyles(expected), printoutStyles(received));\n  // Remove the \"+ Received\" annotation because this is a one-way diff\n  return diffOutput.replace(`${chalk.red('+ Received')}\\n`, '')\n}\n\nfunction toHaveStyle(htmlElement, css) {\n  checkHtmlElement(htmlElement, toHaveStyle, this);\n  const parsedCSS =\n    typeof css === 'object' ? css : parseCSS(css, toHaveStyle, this);\n  const {getComputedStyle} = htmlElement.ownerDocument.defaultView;\n\n  const expected = getStyleDeclaration(htmlElement.ownerDocument, parsedCSS);\n  const received = getComputedStyle(htmlElement);\n\n  return {\n    pass: isSubset(expected, received),\n    message: () => {\n      const matcher = `${this.isNot ? '.not' : ''}.toHaveStyle`;\n      return [\n        this.utils.matcherHint(matcher, 'element', ''),\n        expectedDiff(this.utils.diff, expected, received),\n      ].join('\\n\\n')\n    },\n  }\n}\n\nfunction toHaveFocus(element) {\n  checkHtmlElement(element, toHaveFocus, this);\n\n  return {\n    pass: element.ownerDocument.activeElement === element,\n    message: () => {\n      return [\n        this.utils.matcherHint(\n          `${this.isNot ? '.not' : ''}.toHaveFocus`,\n          'element',\n          '',\n        ),\n        '',\n        ...(this.isNot\n          ? [\n              'Received element is focused:',\n              `  ${this.utils.printReceived(element)}`,\n            ]\n          : [\n              'Expected element with focus:',\n              `  ${this.utils.printExpected(element)}`,\n              'Received element with focus:',\n              `  ${this.utils.printReceived(\n                element.ownerDocument.activeElement,\n              )}`,\n            ]),\n      ].join('\\n')\n    },\n  }\n}\n\n// Returns the combined value of several elements that have the same name\n// e.g. radio buttons or groups of checkboxes\nfunction getMultiElementValue(elements) {\n  const types = [...new Set(elements.map(element => element.type))];\n  if (types.length !== 1) {\n    throw new Error(\n      'Multiple form elements with the same name must be of the same type',\n    )\n  }\n  switch (types[0]) {\n    case 'radio': {\n      const theChosenOne = elements.find(radio => radio.checked);\n      return theChosenOne ? theChosenOne.value : undefined\n    }\n    case 'checkbox':\n      return elements\n        .filter(checkbox => checkbox.checked)\n        .map(checkbox => checkbox.value)\n    default:\n      // NOTE: Not even sure this is a valid use case, but just in case...\n      return elements.map(element => element.value)\n  }\n}\n\nfunction getFormValue(container, name) {\n  const elements = [...container.querySelectorAll(`[name=\"${escape(name)}\"]`)];\n  /* istanbul ignore if */\n  if (elements.length === 0) {\n    return undefined // shouldn't happen, but just in case\n  }\n  switch (elements.length) {\n    case 1:\n      return getSingleElementValue(elements[0])\n    default:\n      return getMultiElementValue(elements)\n  }\n}\n\n// Strips the `[]` suffix off a form value name\nfunction getPureName(name) {\n  return /\\[\\]$/.test(name) ? name.slice(0, -2) : name\n}\n\nfunction getAllFormValues(container) {\n  const names = Array.from(container.elements).map(element => element.name);\n  return names.reduce(\n    (obj, name) => ({\n      ...obj,\n      [getPureName(name)]: getFormValue(container, name),\n    }),\n    {},\n  )\n}\n\nfunction toHaveFormValues(formElement, expectedValues) {\n  checkHtmlElement(formElement, toHaveFormValues, this);\n  if (!formElement.elements) {\n    // TODO: Change condition to use instanceof against the appropriate element classes instead\n    throw new Error('toHaveFormValues must be called on a form or a fieldset')\n  }\n  const formValues = getAllFormValues(formElement);\n  return {\n    pass: Object.entries(expectedValues).every(([name, expectedValue]) =>\n      isEqualWith(formValues[name], expectedValue, compareArraysAsSet),\n    ),\n    message: () => {\n      const to = this.isNot ? 'not to' : 'to';\n      const matcher = `${this.isNot ? '.not' : ''}.toHaveFormValues`;\n      const commonKeyValues = Object.keys(formValues)\n        .filter(key => expectedValues.hasOwnProperty(key))\n        .reduce((obj, key) => ({...obj, [key]: formValues[key]}), {});\n      return [\n        this.utils.matcherHint(matcher, 'element', ''),\n        `Expected the element ${to} have form values`,\n        this.utils.diff(expectedValues, commonKeyValues),\n      ].join('\\n\\n')\n    },\n  }\n}\n\nfunction isStyleVisible(element) {\n  const {getComputedStyle} = element.ownerDocument.defaultView;\n\n  const {display, visibility, opacity} = getComputedStyle(element);\n  return (\n    display !== 'none' &&\n    visibility !== 'hidden' &&\n    visibility !== 'collapse' &&\n    opacity !== '0' &&\n    opacity !== 0\n  )\n}\n\nfunction isAttributeVisible(element, previousElement) {\n  let detailsVisibility;\n\n  if (previousElement) {\n    detailsVisibility =\n      element.nodeName === 'DETAILS' && previousElement.nodeName !== 'SUMMARY'\n        ? element.hasAttribute('open')\n        : true;\n  } else {\n    detailsVisibility =\n      element.nodeName === 'DETAILS' ? element.hasAttribute('open') : true;\n  }\n\n  return !element.hasAttribute('hidden') && detailsVisibility\n}\n\nfunction isElementVisible(element, previousElement) {\n  return (\n    isStyleVisible(element) &&\n    isAttributeVisible(element, previousElement) &&\n    (!element.parentElement || isElementVisible(element.parentElement, element))\n  )\n}\n\nfunction toBeVisible(element) {\n  checkHtmlElement(element, toBeVisible, this);\n  const isInDocument =\n    element.ownerDocument === element.getRootNode({composed: true});\n  const isVisible = isInDocument && isElementVisible(element);\n  return {\n    pass: isVisible,\n    message: () => {\n      const is = isVisible ? 'is' : 'is not';\n      return [\n        this.utils.matcherHint(\n          `${this.isNot ? '.not' : ''}.toBeVisible`,\n          'element',\n          '',\n        ),\n        '',\n        `Received element ${is} visible${\n          isInDocument ? '' : ' (element is not in the document)'\n        }:`,\n        `  ${this.utils.printReceived(element.cloneNode(false))}`,\n      ].join('\\n')\n    },\n  }\n}\n\n// form elements that support 'disabled'\nconst FORM_TAGS$2 = [\n  'fieldset',\n  'input',\n  'select',\n  'optgroup',\n  'option',\n  'button',\n  'textarea',\n];\n\n/*\n * According to specification:\n * If <fieldset> is disabled, the form controls that are its descendants,\n * except descendants of its first optional <legend> element, are disabled\n *\n * https://html.spec.whatwg.org/multipage/form-elements.html#concept-fieldset-disabled\n *\n * This method tests whether element is first legend child of fieldset parent\n */\nfunction isFirstLegendChildOfFieldset(element, parent) {\n  return (\n    getTag(element) === 'legend' &&\n    getTag(parent) === 'fieldset' &&\n    element.isSameNode(\n      Array.from(parent.children).find(child => getTag(child) === 'legend'),\n    )\n  )\n}\n\nfunction isElementDisabledByParent(element, parent) {\n  return (\n    isElementDisabled(parent) && !isFirstLegendChildOfFieldset(element, parent)\n  )\n}\n\nfunction isCustomElement(tag) {\n  return tag.includes('-')\n}\n\n/*\n * Only certain form elements and custom elements can actually be disabled:\n * https://html.spec.whatwg.org/multipage/semantics-other.html#disabled-elements\n */\nfunction canElementBeDisabled(element) {\n  const tag = getTag(element);\n  return FORM_TAGS$2.includes(tag) || isCustomElement(tag)\n}\n\nfunction isElementDisabled(element) {\n  return canElementBeDisabled(element) && element.hasAttribute('disabled')\n}\n\nfunction isAncestorDisabled(element) {\n  const parent = element.parentElement;\n  return (\n    Boolean(parent) &&\n    (isElementDisabledByParent(element, parent) || isAncestorDisabled(parent))\n  )\n}\n\nfunction isElementOrAncestorDisabled(element) {\n  return (\n    canElementBeDisabled(element) &&\n    (isElementDisabled(element) || isAncestorDisabled(element))\n  )\n}\n\nfunction toBeDisabled(element) {\n  checkHtmlElement(element, toBeDisabled, this);\n\n  const isDisabled = isElementOrAncestorDisabled(element);\n\n  return {\n    pass: isDisabled,\n    message: () => {\n      const is = isDisabled ? 'is' : 'is not';\n      return [\n        this.utils.matcherHint(\n          `${this.isNot ? '.not' : ''}.toBeDisabled`,\n          'element',\n          '',\n        ),\n        '',\n        `Received element ${is} disabled:`,\n        `  ${this.utils.printReceived(element.cloneNode(false))}`,\n      ].join('\\n')\n    },\n  }\n}\n\nfunction toBeEnabled(element) {\n  checkHtmlElement(element, toBeEnabled, this);\n\n  const isEnabled = !isElementOrAncestorDisabled(element);\n\n  return {\n    pass: isEnabled,\n    message: () => {\n      const is = isEnabled ? 'is' : 'is not';\n      return [\n        this.utils.matcherHint(\n          `${this.isNot ? '.not' : ''}.toBeEnabled`,\n          'element',\n          '',\n        ),\n        '',\n        `Received element ${is} enabled:`,\n        `  ${this.utils.printReceived(element.cloneNode(false))}`,\n      ].join('\\n')\n    },\n  }\n}\n\n// form elements that support 'required'\nconst FORM_TAGS$1 = ['select', 'textarea'];\n\nconst ARIA_FORM_TAGS = ['input', 'select', 'textarea'];\n\nconst UNSUPPORTED_INPUT_TYPES = [\n  'color',\n  'hidden',\n  'range',\n  'submit',\n  'image',\n  'reset',\n];\n\nconst SUPPORTED_ARIA_ROLES = [\n  'checkbox',\n  'combobox',\n  'gridcell',\n  'listbox',\n  'radiogroup',\n  'spinbutton',\n  'textbox',\n  'tree',\n];\n\nfunction isRequiredOnFormTagsExceptInput(element) {\n  return FORM_TAGS$1.includes(getTag(element)) && element.hasAttribute('required')\n}\n\nfunction isRequiredOnSupportedInput(element) {\n  return (\n    getTag(element) === 'input' &&\n    element.hasAttribute('required') &&\n    ((element.hasAttribute('type') &&\n      !UNSUPPORTED_INPUT_TYPES.includes(element.getAttribute('type'))) ||\n      !element.hasAttribute('type'))\n  )\n}\n\nfunction isElementRequiredByARIA(element) {\n  return (\n    element.hasAttribute('aria-required') &&\n    element.getAttribute('aria-required') === 'true' &&\n    (ARIA_FORM_TAGS.includes(getTag(element)) ||\n      (element.hasAttribute('role') &&\n        SUPPORTED_ARIA_ROLES.includes(element.getAttribute('role'))))\n  )\n}\n\nfunction toBeRequired(element) {\n  checkHtmlElement(element, toBeRequired, this);\n\n  const isRequired =\n    isRequiredOnFormTagsExceptInput(element) ||\n    isRequiredOnSupportedInput(element) ||\n    isElementRequiredByARIA(element);\n\n  return {\n    pass: isRequired,\n    message: () => {\n      const is = isRequired ? 'is' : 'is not';\n      return [\n        this.utils.matcherHint(\n          `${this.isNot ? '.not' : ''}.toBeRequired`,\n          'element',\n          '',\n        ),\n        '',\n        `Received element ${is} required:`,\n        `  ${this.utils.printReceived(element.cloneNode(false))}`,\n      ].join('\\n')\n    },\n  }\n}\n\nconst FORM_TAGS = ['form', 'input', 'select', 'textarea'];\n\nfunction isElementHavingAriaInvalid(element) {\n  return (\n    element.hasAttribute('aria-invalid') &&\n    element.getAttribute('aria-invalid') !== 'false'\n  )\n}\n\nfunction isSupportsValidityMethod(element) {\n  return FORM_TAGS.includes(getTag(element))\n}\n\nfunction isElementInvalid(element) {\n  const isHaveAriaInvalid = isElementHavingAriaInvalid(element);\n  if (isSupportsValidityMethod(element)) {\n    return isHaveAriaInvalid || !element.checkValidity()\n  } else {\n    return isHaveAriaInvalid\n  }\n}\n\nfunction toBeInvalid(element) {\n  checkHtmlElement(element, toBeInvalid, this);\n\n  const isInvalid = isElementInvalid(element);\n\n  return {\n    pass: isInvalid,\n    message: () => {\n      const is = isInvalid ? 'is' : 'is not';\n      return [\n        this.utils.matcherHint(\n          `${this.isNot ? '.not' : ''}.toBeInvalid`,\n          'element',\n          '',\n        ),\n        '',\n        `Received element ${is} currently invalid:`,\n        `  ${this.utils.printReceived(element.cloneNode(false))}`,\n      ].join('\\n')\n    },\n  }\n}\n\nfunction toBeValid(element) {\n  checkHtmlElement(element, toBeValid, this);\n\n  const isValid = !isElementInvalid(element);\n\n  return {\n    pass: isValid,\n    message: () => {\n      const is = isValid ? 'is' : 'is not';\n      return [\n        this.utils.matcherHint(\n          `${this.isNot ? '.not' : ''}.toBeValid`,\n          'element',\n          '',\n        ),\n        '',\n        `Received element ${is} currently valid:`,\n        `  ${this.utils.printReceived(element.cloneNode(false))}`,\n      ].join('\\n')\n    },\n  }\n}\n\nfunction toHaveValue(htmlElement, expectedValue) {\n  checkHtmlElement(htmlElement, toHaveValue, this);\n\n  if (\n    htmlElement.tagName.toLowerCase() === 'input' &&\n    ['checkbox', 'radio'].includes(htmlElement.type)\n  ) {\n    throw new Error(\n      'input with type=checkbox or type=radio cannot be used with .toHaveValue(). Use .toBeChecked() for type=checkbox or .toHaveFormValues() instead',\n    )\n  }\n\n  const receivedValue = getSingleElementValue(htmlElement);\n  const expectsValue = expectedValue !== undefined;\n\n  let expectedTypedValue = expectedValue;\n  let receivedTypedValue = receivedValue;\n  if (expectedValue == receivedValue && expectedValue !== receivedValue) {\n    expectedTypedValue = `${expectedValue} (${typeof expectedValue})`;\n    receivedTypedValue = `${receivedValue} (${typeof receivedValue})`;\n  }\n\n  return {\n    pass: expectsValue\n      ? isEqualWith(receivedValue, expectedValue, compareArraysAsSet)\n      : Boolean(receivedValue),\n    message: () => {\n      const to = this.isNot ? 'not to' : 'to';\n      const matcher = this.utils.matcherHint(\n        `${this.isNot ? '.not' : ''}.toHaveValue`,\n        'element',\n        expectedValue,\n      );\n      return getMessage(\n        this,\n        matcher,\n        `Expected the element ${to} have value`,\n        expectsValue ? expectedTypedValue : '(any)',\n        'Received',\n        receivedTypedValue,\n      )\n    },\n  }\n}\n\nfunction toHaveDisplayValue(htmlElement, expectedValue) {\n  checkHtmlElement(htmlElement, toHaveDisplayValue, this);\n  const tagName = htmlElement.tagName.toLowerCase();\n\n  if (!['select', 'input', 'textarea'].includes(tagName)) {\n    throw new Error(\n      '.toHaveDisplayValue() currently supports only input, textarea or select elements, try with another matcher instead.',\n    )\n  }\n\n  if (tagName === 'input' && ['radio', 'checkbox'].includes(htmlElement.type)) {\n    throw new Error(\n      `.toHaveDisplayValue() currently does not support input[type=\"${htmlElement.type}\"], try with another matcher instead.`,\n    )\n  }\n\n  const values = getValues(tagName, htmlElement);\n  const expectedValues = getExpectedValues(expectedValue);\n  const numberOfMatchesWithValues = expectedValues.filter(expected =>\n    values.some(value =>\n      expected instanceof RegExp\n        ? expected.test(value)\n        : this.equals(value, String(expected)),\n    ),\n  ).length;\n\n  const matchedWithAllValues = numberOfMatchesWithValues === values.length;\n  const matchedWithAllExpectedValues =\n    numberOfMatchesWithValues === expectedValues.length;\n\n  return {\n    pass: matchedWithAllValues && matchedWithAllExpectedValues,\n    message: () =>\n      getMessage(\n        this,\n        this.utils.matcherHint(\n          `${this.isNot ? '.not' : ''}.toHaveDisplayValue`,\n          'element',\n          '',\n        ),\n        `Expected element ${this.isNot ? 'not ' : ''}to have display value`,\n        expectedValue,\n        'Received',\n        values,\n      ),\n  }\n}\n\nfunction getValues(tagName, htmlElement) {\n  return tagName === 'select'\n    ? Array.from(htmlElement)\n        .filter(option => option.selected)\n        .map(option => option.textContent)\n    : [htmlElement.value]\n}\n\nfunction getExpectedValues(expectedValue) {\n  return expectedValue instanceof Array ? expectedValue : [expectedValue]\n}\n\nfunction toBeChecked(element) {\n  checkHtmlElement(element, toBeChecked, this);\n\n  const isValidInput = () => {\n    return (\n      element.tagName.toLowerCase() === 'input' &&\n      ['checkbox', 'radio'].includes(element.type)\n    )\n  };\n\n  const isValidAriaElement = () => {\n    return (\n      roleSupportsChecked(element.getAttribute('role')) &&\n      ['true', 'false'].includes(element.getAttribute('aria-checked'))\n    )\n  };\n\n  if (!isValidInput() && !isValidAriaElement()) {\n    return {\n      pass: false,\n      message: () =>\n        `only inputs with type=\"checkbox\" or type=\"radio\" or elements with ${supportedRolesSentence()} and a valid aria-checked attribute can be used with .toBeChecked(). Use .toHaveValue() instead`,\n    }\n  }\n\n  const isChecked = () => {\n    if (isValidInput()) return element.checked\n    return element.getAttribute('aria-checked') === 'true'\n  };\n\n  return {\n    pass: isChecked(),\n    message: () => {\n      const is = isChecked() ? 'is' : 'is not';\n      return [\n        this.utils.matcherHint(\n          `${this.isNot ? '.not' : ''}.toBeChecked`,\n          'element',\n          '',\n        ),\n        '',\n        `Received element ${is} checked:`,\n        `  ${this.utils.printReceived(element.cloneNode(false))}`,\n      ].join('\\n')\n    },\n  }\n}\n\nfunction supportedRolesSentence() {\n  return toSentence(\n    supportedRoles().map(role => `role=\"${role}\"`),\n    {lastWordConnector: ' or '},\n  )\n}\n\nfunction supportedRoles() {\n  return roles.keys().filter(roleSupportsChecked)\n}\n\nfunction roleSupportsChecked(role) {\n  return roles.get(role)?.props['aria-checked'] !== undefined\n}\n\nfunction toBePartiallyChecked(element) {\n  checkHtmlElement(element, toBePartiallyChecked, this);\n\n  const isValidInput = () => {\n    return (\n      element.tagName.toLowerCase() === 'input' && element.type === 'checkbox'\n    )\n  };\n\n  const isValidAriaElement = () => {\n    return element.getAttribute('role') === 'checkbox'\n  };\n\n  if (!isValidInput() && !isValidAriaElement()) {\n    return {\n      pass: false,\n      message: () =>\n        'only inputs with type=\"checkbox\" or elements with role=\"checkbox\" and a valid aria-checked attribute can be used with .toBePartiallyChecked(). Use .toHaveValue() instead',\n    }\n  }\n\n  const isPartiallyChecked = () => {\n    const isAriaMixed = element.getAttribute('aria-checked') === 'mixed';\n\n    if (isValidInput()) {\n      return element.indeterminate || isAriaMixed\n    }\n\n    return isAriaMixed\n  };\n\n  return {\n    pass: isPartiallyChecked(),\n    message: () => {\n      const is = isPartiallyChecked() ? 'is' : 'is not';\n      return [\n        this.utils.matcherHint(\n          `${this.isNot ? '.not' : ''}.toBePartiallyChecked`,\n          'element',\n          '',\n        ),\n        '',\n        `Received element ${is} partially checked:`,\n        `  ${this.utils.printReceived(element.cloneNode(false))}`,\n      ].join('\\n')\n    },\n  }\n}\n\n// See algoritm: https://www.w3.org/TR/accname-1.1/#mapping_additional_nd_description\nfunction toHaveDescription(htmlElement, checkWith) {\n  deprecate(\n    'toHaveDescription',\n    'Please use toHaveAccessibleDescription.',\n  );\n\n  checkHtmlElement(htmlElement, toHaveDescription, this);\n\n  const expectsDescription = checkWith !== undefined;\n\n  const descriptionIDRaw = htmlElement.getAttribute('aria-describedby') || '';\n  const descriptionIDs = descriptionIDRaw.split(/\\s+/).filter(Boolean);\n  let description = '';\n  if (descriptionIDs.length > 0) {\n    const document = htmlElement.ownerDocument;\n    const descriptionEls = descriptionIDs\n      .map(descriptionID => document.getElementById(descriptionID))\n      .filter(Boolean);\n    description = normalize(descriptionEls.map(el => el.textContent).join(' '));\n  }\n\n  return {\n    pass: expectsDescription\n      ? checkWith instanceof RegExp\n        ? checkWith.test(description)\n        : this.equals(description, checkWith)\n      : Boolean(description),\n    message: () => {\n      const to = this.isNot ? 'not to' : 'to';\n      return getMessage(\n        this,\n        this.utils.matcherHint(\n          `${this.isNot ? '.not' : ''}.toHaveDescription`,\n          'element',\n          '',\n        ),\n        `Expected the element ${to} have description`,\n        this.utils.printExpected(checkWith),\n        'Received',\n        this.utils.printReceived(description),\n      )\n    },\n  }\n}\n\n// See aria-errormessage spec https://www.w3.org/TR/wai-aria-1.2/#aria-errormessage\nfunction toHaveErrorMessage(htmlElement, checkWith) {\n  deprecate('toHaveErrorMessage', 'Please use toHaveAccessibleErrorMessage.');\n  checkHtmlElement(htmlElement, toHaveErrorMessage, this);\n\n  if (\n    !htmlElement.hasAttribute('aria-invalid') ||\n    htmlElement.getAttribute('aria-invalid') === 'false'\n  ) {\n    const not = this.isNot ? '.not' : '';\n\n    return {\n      pass: false,\n      message: () => {\n        return getMessage(\n          this,\n          this.utils.matcherHint(`${not}.toHaveErrorMessage`, 'element', ''),\n          `Expected the element to have invalid state indicated by`,\n          'aria-invalid=\"true\"',\n          'Received',\n          htmlElement.hasAttribute('aria-invalid')\n            ? `aria-invalid=\"${htmlElement.getAttribute('aria-invalid')}\"`\n            : this.utils.printReceived(''),\n        )\n      },\n    }\n  }\n\n  const expectsErrorMessage = checkWith !== undefined;\n\n  const errormessageIDRaw = htmlElement.getAttribute('aria-errormessage') || '';\n  const errormessageIDs = errormessageIDRaw.split(/\\s+/).filter(Boolean);\n\n  let errormessage = '';\n  if (errormessageIDs.length > 0) {\n    const document = htmlElement.ownerDocument;\n\n    const errormessageEls = errormessageIDs\n      .map(errormessageID => document.getElementById(errormessageID))\n      .filter(Boolean);\n\n    errormessage = normalize(\n      errormessageEls.map(el => el.textContent).join(' '),\n    );\n  }\n\n  return {\n    pass: expectsErrorMessage\n      ? checkWith instanceof RegExp\n        ? checkWith.test(errormessage)\n        : this.equals(errormessage, checkWith)\n      : Boolean(errormessage),\n    message: () => {\n      const to = this.isNot ? 'not to' : 'to';\n      return getMessage(\n        this,\n        this.utils.matcherHint(\n          `${this.isNot ? '.not' : ''}.toHaveErrorMessage`,\n          'element',\n          '',\n        ),\n        `Expected the element ${to} have error message`,\n        this.utils.printExpected(checkWith),\n        'Received',\n        this.utils.printReceived(errormessage),\n      )\n    },\n  }\n}\n\nvar extensions = /*#__PURE__*/Object.freeze({\n  __proto__: null,\n  toBeChecked: toBeChecked,\n  toBeDisabled: toBeDisabled,\n  toBeEmpty: toBeEmpty,\n  toBeEmptyDOMElement: toBeEmptyDOMElement,\n  toBeEnabled: toBeEnabled,\n  toBeInTheDOM: toBeInTheDOM,\n  toBeInTheDocument: toBeInTheDocument,\n  toBeInvalid: toBeInvalid,\n  toBePartiallyChecked: toBePartiallyChecked,\n  toBeRequired: toBeRequired,\n  toBeValid: toBeValid,\n  toBeVisible: toBeVisible,\n  toContainElement: toContainElement,\n  toContainHTML: toContainHTML,\n  toHaveAccessibleDescription: toHaveAccessibleDescription,\n  toHaveAccessibleErrorMessage: toHaveAccessibleErrorMessage,\n  toHaveAccessibleName: toHaveAccessibleName,\n  toHaveAttribute: toHaveAttribute,\n  toHaveClass: toHaveClass,\n  toHaveDescription: toHaveDescription,\n  toHaveDisplayValue: toHaveDisplayValue,\n  toHaveErrorMessage: toHaveErrorMessage,\n  toHaveFocus: toHaveFocus,\n  toHaveFormValues: toHaveFormValues,\n  toHaveRole: toHaveRole,\n  toHaveStyle: toHaveStyle,\n  toHaveTextContent: toHaveTextContent,\n  toHaveValue: toHaveValue\n});\n\nexport { toBePartiallyChecked as A, toHaveDescription as B, toHaveErrorMessage as C, toBeInTheDocument as a, toBeEmpty as b, toBeEmptyDOMElement as c, toContainElement as d, extensions as e, toContainHTML as f, toHaveTextContent as g, toHaveAccessibleDescription as h, toHaveAccessibleErrorMessage as i, toHaveRole as j, toHaveAccessibleName as k, toHaveAttribute as l, toHaveClass as m, toHaveStyle as n, toHaveFocus as o, toHaveFormValues as p, toBeVisible as q, toBeDisabled as r, toBeEnabled as s, toBeInTheDOM as t, toBeRequired as u, toBeInvalid as v, toBeValid as w, toHaveValue as x, toHaveDisplayValue as y, toBeChecked as z };\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
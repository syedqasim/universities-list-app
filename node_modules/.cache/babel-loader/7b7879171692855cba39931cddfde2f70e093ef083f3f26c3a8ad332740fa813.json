{"ast":null,"code":"// UniversityController.ts\nimport University from \"../models/University\";\nconst API_URL = \"http://universities.hipolabs.com/search?country=United%20Arab%20Emirates\";\nclass UniversityController {\n  static async fetchUniversities() {\n    try {\n      const response = await fetch(API_URL);\n      console.log(\"Fetch response:\", response);\n      if (!response.ok) {\n        throw new Error(\"Network response was not ok\");\n      }\n      const data = await response.json();\n      console.log(\"Fetched data:\", data);\n      const universities = data.map(uni => new University(uni.name, uni.country, uni.web_pages, uni.domains));\n      localStorage.setItem(\"universities\", JSON.stringify(universities));\n      return universities;\n    } catch (error) {\n      console.log(\"Fetch error:\", error);\n      const cachedUniversities = localStorage.getItem(\"universities\");\n      if (cachedUniversities) {\n        return JSON.parse(cachedUniversities);\n      } else {\n        throw new Error(\"Failed to fetch universities and no cached data found\");\n      }\n    }\n  }\n  static searchUniversities(keyword) {\n    const universities = JSON.parse(localStorage.getItem(\"universities\") || \"[]\");\n    return universities.filter(uni => uni.name.toLowerCase().includes(keyword.toLowerCase()));\n  }\n  static sortUniversities(alphabetically = true) {\n    const universities = JSON.parse(localStorage.getItem(\"universities\") || \"[]\");\n    return universities.sort((a, b) => {\n      if (alphabetically) {\n        return a.name.localeCompare(b.name);\n      } else {\n        return b.name.localeCompare(a.name);\n      }\n    });\n  }\n  static deleteUniversity(name) {\n    let universities = JSON.parse(localStorage.getItem(\"universities\") || \"[]\");\n    universities = universities.filter(uni => uni.name !== name);\n    localStorage.setItem(\"universities\", JSON.stringify(universities));\n    return universities;\n  }\n}\nexport default UniversityController;","map":{"version":3,"names":["University","API_URL","UniversityController","fetchUniversities","response","fetch","console","log","ok","Error","data","json","universities","map","uni","name","country","web_pages","domains","localStorage","setItem","JSON","stringify","error","cachedUniversities","getItem","parse","searchUniversities","keyword","filter","toLowerCase","includes","sortUniversities","alphabetically","sort","a","b","localeCompare","deleteUniversity"],"sources":["/Users/tamm/work/universities-list-app/src/controllers/UniversityController.ts"],"sourcesContent":["// UniversityController.ts\nimport University from \"../models/University\";\n\nconst API_URL =\n  \"http://universities.hipolabs.com/search?country=United%20Arab%20Emirates\";\n\nclass UniversityController {\n  static async fetchUniversities(): Promise<University[]> {\n    try {\n      const response = await fetch(API_URL);\n      console.log(\"Fetch response:\", response);\n      if (!response.ok) {\n        throw new Error(\"Network response was not ok\");\n      }\n      const data = await response.json();\n      console.log(\"Fetched data:\", data);\n      const universities = data.map(\n        (uni: any) =>\n          new University(uni.name, uni.country, uni.web_pages, uni.domains)\n      );\n      localStorage.setItem(\"universities\", JSON.stringify(universities));\n      return universities;\n    } catch (error) {\n      console.log(\"Fetch error:\", error);\n      const cachedUniversities = localStorage.getItem(\"universities\");\n      if (cachedUniversities) {\n        return JSON.parse(cachedUniversities);\n      } else {\n        throw new Error(\n          \"Failed to fetch universities and no cached data found\"\n        );\n      }\n    }\n  }\n\n  static searchUniversities(keyword: string): University[] {\n    const universities: University[] = JSON.parse(\n      localStorage.getItem(\"universities\") || \"[]\"\n    );\n    return universities.filter((uni) =>\n      uni.name.toLowerCase().includes(keyword.toLowerCase())\n    );\n  }\n\n  static sortUniversities(alphabetically: boolean = true): University[] {\n    const universities: University[] = JSON.parse(\n      localStorage.getItem(\"universities\") || \"[]\"\n    );\n    return universities.sort((a, b) => {\n      if (alphabetically) {\n        return a.name.localeCompare(b.name);\n      } else {\n        return b.name.localeCompare(a.name);\n      }\n    });\n  }\n\n  static deleteUniversity(name: string): University[] {\n    let universities: University[] = JSON.parse(\n      localStorage.getItem(\"universities\") || \"[]\"\n    );\n    universities = universities.filter((uni) => uni.name !== name);\n    localStorage.setItem(\"universities\", JSON.stringify(universities));\n    return universities;\n  }\n}\n\nexport default UniversityController;\n"],"mappings":"AAAA;AACA,OAAOA,UAAU,MAAM,sBAAsB;AAE7C,MAAMC,OAAO,GACX,0EAA0E;AAE5E,MAAMC,oBAAoB,CAAC;EACzB,aAAaC,iBAAiBA,CAAA,EAA0B;IACtD,IAAI;MACF,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAACJ,OAAO,CAAC;MACrCK,OAAO,CAACC,GAAG,CAAC,iBAAiB,EAAEH,QAAQ,CAAC;MACxC,IAAI,CAACA,QAAQ,CAACI,EAAE,EAAE;QAChB,MAAM,IAAIC,KAAK,CAAC,6BAA6B,CAAC;MAChD;MACA,MAAMC,IAAI,GAAG,MAAMN,QAAQ,CAACO,IAAI,CAAC,CAAC;MAClCL,OAAO,CAACC,GAAG,CAAC,eAAe,EAAEG,IAAI,CAAC;MAClC,MAAME,YAAY,GAAGF,IAAI,CAACG,GAAG,CAC1BC,GAAQ,IACP,IAAId,UAAU,CAACc,GAAG,CAACC,IAAI,EAAED,GAAG,CAACE,OAAO,EAAEF,GAAG,CAACG,SAAS,EAAEH,GAAG,CAACI,OAAO,CACpE,CAAC;MACDC,YAAY,CAACC,OAAO,CAAC,cAAc,EAAEC,IAAI,CAACC,SAAS,CAACV,YAAY,CAAC,CAAC;MAClE,OAAOA,YAAY;IACrB,CAAC,CAAC,OAAOW,KAAK,EAAE;MACdjB,OAAO,CAACC,GAAG,CAAC,cAAc,EAAEgB,KAAK,CAAC;MAClC,MAAMC,kBAAkB,GAAGL,YAAY,CAACM,OAAO,CAAC,cAAc,CAAC;MAC/D,IAAID,kBAAkB,EAAE;QACtB,OAAOH,IAAI,CAACK,KAAK,CAACF,kBAAkB,CAAC;MACvC,CAAC,MAAM;QACL,MAAM,IAAIf,KAAK,CACb,uDACF,CAAC;MACH;IACF;EACF;EAEA,OAAOkB,kBAAkBA,CAACC,OAAe,EAAgB;IACvD,MAAMhB,YAA0B,GAAGS,IAAI,CAACK,KAAK,CAC3CP,YAAY,CAACM,OAAO,CAAC,cAAc,CAAC,IAAI,IAC1C,CAAC;IACD,OAAOb,YAAY,CAACiB,MAAM,CAAEf,GAAG,IAC7BA,GAAG,CAACC,IAAI,CAACe,WAAW,CAAC,CAAC,CAACC,QAAQ,CAACH,OAAO,CAACE,WAAW,CAAC,CAAC,CACvD,CAAC;EACH;EAEA,OAAOE,gBAAgBA,CAACC,cAAuB,GAAG,IAAI,EAAgB;IACpE,MAAMrB,YAA0B,GAAGS,IAAI,CAACK,KAAK,CAC3CP,YAAY,CAACM,OAAO,CAAC,cAAc,CAAC,IAAI,IAC1C,CAAC;IACD,OAAOb,YAAY,CAACsB,IAAI,CAAC,CAACC,CAAC,EAAEC,CAAC,KAAK;MACjC,IAAIH,cAAc,EAAE;QAClB,OAAOE,CAAC,CAACpB,IAAI,CAACsB,aAAa,CAACD,CAAC,CAACrB,IAAI,CAAC;MACrC,CAAC,MAAM;QACL,OAAOqB,CAAC,CAACrB,IAAI,CAACsB,aAAa,CAACF,CAAC,CAACpB,IAAI,CAAC;MACrC;IACF,CAAC,CAAC;EACJ;EAEA,OAAOuB,gBAAgBA,CAACvB,IAAY,EAAgB;IAClD,IAAIH,YAA0B,GAAGS,IAAI,CAACK,KAAK,CACzCP,YAAY,CAACM,OAAO,CAAC,cAAc,CAAC,IAAI,IAC1C,CAAC;IACDb,YAAY,GAAGA,YAAY,CAACiB,MAAM,CAAEf,GAAG,IAAKA,GAAG,CAACC,IAAI,KAAKA,IAAI,CAAC;IAC9DI,YAAY,CAACC,OAAO,CAAC,cAAc,EAAEC,IAAI,CAACC,SAAS,CAACV,YAAY,CAAC,CAAC;IAClE,OAAOA,YAAY;EACrB;AACF;AAEA,eAAeV,oBAAoB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}